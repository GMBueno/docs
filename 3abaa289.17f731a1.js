(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{101:function(e,t,n){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!a(e)}n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return i}))},66:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return p}));var a=n(2),i=n(6),l=(n(0),n(92)),r=n(98),o=n(99),s=(n(95),{title:"Endpoints"}),c={unversionedId:"satellite_endpoints",id:"satellite_endpoints",isDocsHomePage:!1,title:"Endpoints",description:"All HTTP methods should be prepended by this service's endpoint:",source:"@site/docs/satellite_endpoints.md",permalink:"/docs/docs/satellite_endpoints",editUrl:"https://github.com/Leaf-Agriculture/docs/tree/master/docs/satellite_endpoints.md",sidebar:"docs",previous:{title:"Overview",permalink:"/docs/docs/satellite_overview"},next:{title:"Overview",permalink:"/docs/docs/converters_overview"}},b=[{value:"Endpoints",id:"endpoints",children:[{value:"<code>GET /fields</code>",id:"get-fields",children:[]},{value:"<code>GET /fields/{id}</code>",id:"get-fieldsid",children:[]},{value:"<code>GET /fields/{id}/processes</code>",id:"get-fieldsidprocesses",children:[]},{value:"<code>POST /fields</code>",id:"post-fields",children:[]},{value:"<code>PUT /fields/{id}</code>",id:"put-fieldsid",children:[]},{value:"<code>DELETE /fields/{id}</code>",id:"delete-fieldsid",children:[]}]}],d={rightToc:b};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"All HTTP methods should be prepended by this service's endpoint:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"https://api.withleaf.io/services/satellite/api\n")),Object(l.b)("p",null,"This service has the following endpoints available:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"GET    /fields\nGET    /fields/{id}\nGET    /fields/{id}/processes\nPOST   /fields\nPUT    /fields/{id}\nDELETE /fields/{id}\n")),Object(l.b)("hr",null),Object(l.b)("h2",{id:"endpoints"},"Endpoints"),Object(l.b)("h3",{id:"get-fields"},Object(l.b)("inlineCode",{parentName:"h3"},"GET /fields")),Object(l.b)("p",null,"Returns paged results for all fields registered."),Object(l.b)("p",null,"It returns a list of JSON objects like so:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),'[\n    {\n        "externalId": "your field id",\n        "geometry": {\n            "type": "MultiPolygon",\n            "coordinates": [...]\n        }\n    },\n    # etc...\n]\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"externalId"),": external ID used in the field's registration"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"geometry"),": a valid ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"https://tools.ietf.org/html/rfc7946#section-3.1.7"}),"MultiPolygon")," GeoJSON object with the geometry of the\nfield")),Object(l.b)(r.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"js",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/satellite/api/fields'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(l.b)(o.a,{value:"py",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/satellite/api/fields'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(l.b)(o.a,{value:"sh",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/satellite/api/fields'\n")))),Object(l.b)("hr",null),Object(l.b)("h3",{id:"get-fieldsid"},Object(l.b)("inlineCode",{parentName:"h3"},"GET /fields/{id}")),Object(l.b)("p",null,"Fetches a field entry based on its external id."),Object(l.b)("p",null,"It returns a single JSON object with the following entries (like each item from\n",Object(l.b)("inlineCode",{parentName:"p"},"GET /fields")," results):"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),'{\n    "externalId": "your field id",\n    "geometry": {\n        "type": "MultiPolygon",\n        "coordinates": [...]\n    }\n}\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"id"),": external ID used in the field's registration"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"geometry"),": a valid ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"https://tools.ietf.org/html/rfc7946#section-3.1.7"}),"MultiPolygon")," GeoJSON object with the geometry of the\nfield")),Object(l.b)(r.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"js",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/satellite/api/fields/YOUR_ID'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(l.b)(o.a,{value:"py",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/satellite/api/fields/YOUR_ID'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(l.b)(o.a,{value:"sh",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/satellite/api/fields/YOUR_ID'\n")))),Object(l.b)("hr",null),Object(l.b)("h3",{id:"get-fieldsidprocesses"},Object(l.b)("inlineCode",{parentName:"h3"},"GET /fields/{id}/processes")),Object(l.b)("p",null,"Returns all processes already handled by our service."),Object(l.b)("p",null,"A ",Object(l.b)("em",{parentName:"p"},"process")," is created by our servers whenever there is a new satellite image\nthat intersects with one of your registered fields. This endpoint is used to\naccess all images that each process generates."),Object(l.b)("p",null,"The returned payload is like so:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),'[\n    {\n        "date": "2020-06-03T19:03:57.882Z",\n        "clouds": 0,\n        "bucketName": "sentinel-s2-l1c",\n        "bucketKey": "tiles/10/S/FH/2020/6/3/0",\n        "bucketRegion": "eu-central-1",\n        "status": "SUCCESS",\n        "coverage": 100,\n        "images": [\n            {\n                "url": "url.to.your.image.tif",\n                "type": "tif",\n                "resolution": 20\n            },\n            # etc...\n        ]\n    },\n    # etc...\n]\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"date"),": the date of the satellite image"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"clouds"),": cloud coverage percentage of the field, from 0 to 100"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"bucketName"),": name of Sentinel's bucket where the original tile is. Usually\n",Object(l.b)("inlineCode",{parentName:"li"},"sentinel-s2-l1c")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"bucketRegion"),": AWS region of original image's bucket. Usually ",Object(l.b)("inlineCode",{parentName:"li"},"eu-central-1")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"bucketKey"),": base path of original satellite image"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"status"),": status of the process. It will be either ",Object(l.b)("inlineCode",{parentName:"li"},"SUCCESS")," or ",Object(l.b)("inlineCode",{parentName:"li"},"FAILURE")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"coverage"),": data coverage percentage of the field, from 0 to 100"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"images"),": each image in this list will have the following data:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"url"),": URL of the image"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"type"),": the type of the image. One of ",Object(l.b)("inlineCode",{parentName:"li"},"tif"),", ",Object(l.b)("inlineCode",{parentName:"li"},"ndvi"),", ",Object(l.b)("inlineCode",{parentName:"li"},"png")," and\n",Object(l.b)("inlineCode",{parentName:"li"},"tif_colorized")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"resolution"),": resolution, in meters, of the image. See table below")))),Object(l.b)(r.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"js",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nlet endpoint = 'https://api.withleaf.io/services/satellite/api' +\n               '/fields/YOUR_ID/processes'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(l.b)(o.a,{value:"py",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = ('https://api.withleaf.io/services/satellite/api'\n            '/fields/YOUR_ID/processes')\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(l.b)(o.a,{value:"sh",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    --header 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/satellite/api/fields/YOUR_ID/processes'\n")))),Object(l.b)("hr",null),Object(l.b)("h3",{id:"post-fields"},Object(l.b)("inlineCode",{parentName:"h3"},"POST /fields")),Object(l.b)("p",null,"Creates a new field entry in the database."),Object(l.b)("p",null,"A field will be created and, ",Object(l.b)("em",{parentName:"p"},"by default"),", it will have images from the last 30 days. It\nwill be continuously monitored forever, so new images will arrive every ~5 days (time it\ntakes for the satellite to go over the same field when circling the Earth). If you want\nto stop this process, you can delete the field. "),Object(l.b)("p",null,"For deleting, use a ",Object(l.b)("inlineCode",{parentName:"p"},"DELETE")," HTTP request."),Object(l.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(l.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"Note that the field deletion is irreversible and all images will be lost."),Object(l.b)("p",{parentName:"div"},"But you can always create a new field and get images from the past, as far\nas you want."))),Object(l.b)("h4",{id:"payload"},"Payload"),Object(l.b)("p",null,"The payload of this object should be like the following:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),'{\n    "externalId": "your field id",\n    "geometry": {\n        "type": "MultiPolygon",\n        "coordinates": [...]\n    }\n}\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"externalId"),": external ID used in the field's registration"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"geometry"),": a valid ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"https://tools.ietf.org/html/rfc7946#section-3.1.7"}),"MultiPolygon")," GeoJSON object with the geometry of the\nfield")),Object(l.b)("p",null,"If you want images further back than 30 days, you can specify it in the payload."),Object(l.b)("p",null,"There are two ways you can do that:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"by setting a ",Object(l.b)("inlineCode",{parentName:"li"},"startDate"),', a ISO date in "yyyy-mm-dd" format meaning we will\nreturn all images for your field since this date.')),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"or")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"by setting how many ",Object(l.b)("inlineCode",{parentName:"li"},"daysBefore")," (an integer greater than or equal to 0) you\nwant to get images from. ")),Object(l.b)("p",null,"Note that they are both ",Object(l.b)("em",{parentName:"p"},"optional"),", but you ",Object(l.b)("strong",{parentName:"p"},"can not")," specify both. "),Object(l.b)("p",null,"By default, Leaf will retrieve and return images for your field from the last\n30 days (from the moment you create the field). "),Object(l.b)("p",null,"This process will take place in the background."),Object(l.b)("p",null,"There are some limitations regarding the geometry of the field. It cannot be\nbigger than 50k hectares (123.5k acres) and it cannot have a perimeter bigger\nthan 89.4km (55.5 miles)."),Object(l.b)(r.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"js",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nlet endpoint = 'https://api.withleaf.io/services/satellite/api/fields'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\nconst data = { /* Your payload */ }\n\naxios.post(endpoint, { headers, data })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(l.b)(o.a,{value:"py",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/satellite/api/fields'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\npayload = {...}  # Payload\n\nresponse = requests.post(endpoint, headers=headers, json=payload)\nprint(response.json())\n"))),Object(l.b)(o.a,{value:"sh",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    -d '{ your payload }' \\\n    'https://api.withleaf.io/services/satellite/api/fields'\n")))),Object(l.b)("hr",null),Object(l.b)("h3",{id:"put-fieldsid"},Object(l.b)("inlineCode",{parentName:"h3"},"PUT /fields/{id}")),Object(l.b)("p",null,"Endpoint used to update the geometry of the field."),Object(l.b)("p",null,"You cannot update the external id. The payload is a single JSON object with an\nentry ",Object(l.b)("inlineCode",{parentName:"p"},"geometry")," which contains a MultiPolygon GeoJSON object. Again, the new\ngeometry must respect the area and perimeter limits of ",Object(l.b)("inlineCode",{parentName:"p"},"POST /fields"),"."),Object(l.b)(r.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"js",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nlet endpoint = 'https://api.withleaf.io/services/satellite/api/fields'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\nconst data = { /* Your geometry */ }\n\naxios.post(endpoint, { headers, data })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(l.b)(o.a,{value:"py",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/satellite/api/fields'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\npayload = {...}  # Geometry\n\nresponse = requests.post(endpoint, headers=headers, json=payload)\nprint(response.json())\n"))),Object(l.b)(o.a,{value:"sh",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    -d '{ your geometry }' \\\n    'https://api.withleaf.io/services/satellite/api/fields'\n")))),Object(l.b)("hr",null),Object(l.b)("h3",{id:"delete-fieldsid"},Object(l.b)("inlineCode",{parentName:"h3"},"DELETE /fields/{id}")),Object(l.b)("p",null,"Deletes the field from our database."),Object(l.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(l.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"Be careful when using this method. It will delete all the processed images from\nthe database as well."))),Object(l.b)(r.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"js",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\n\nconst TOKEN = 'YOUR_TOKEN'\n\nconst client = axios.create({\n  baseURL: 'https://api.withleaf.io',\n  headers: {'Authorization': `Bearer ${TOKEN}`}\n})\n\nclient.delete('/fields/YOUR_ID')\n  .then(res => console.log(res.statusCode))\n  .catch(console.error)\n"))),Object(l.b)(o.a,{value:"py",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/satellite/api/fields/YOUR_ID'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.delete(endpoint, headers=headers)\nprint(response)\n"))),Object(l.b)(o.a,{value:"sh",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X DELETE \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/satellite/api/fields/YOUR_ID'\n")))))}p.isMDXComponent=!0},92:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return O}));var a=n(0),i=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),b=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=b(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=b(n),u=a,O=d["".concat(r,".").concat(u)]||d[u]||p[u]||l;return n?i.a.createElement(O,o(o({ref:t},c),{},{components:n})):i.a.createElement(O,o({ref:t},c))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var c=2;c<l;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},93:function(e,t,n){"use strict";var a=n(0),i=n(20);t.a=function(){var e=Object(a.useContext)(i.a);if(null===e)throw new Error("Docusaurus context not provided");return e}},94:function(e,t,n){"use strict";function a(e){var t,n,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(i&&(i+=" "),i+=n);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}t.a=function(){for(var e,t,n=0,i="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(i&&(i+=" "),i+=t);return i}},95:function(e,t,n){"use strict";n.d(t,"b",(function(){return l})),n.d(t,"a",(function(){return r}));var a=n(93),i=n(101);function l(){var e=Object(a.a)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,l=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var l=void 0===a?{}:a,r=l.forcePrependBaseUrl,o=void 0!==r&&r,s=l.absolute,c=void 0!==s&&s;if(!n)return n;if(n.startsWith("#"))return n;if(Object(i.b)(n))return n;if(o)return t+n;var b=!n.startsWith(t)?t+n.replace(/^\//,""):n;return c?e+b:b}(l,n,e,t)}}}function r(e,t){return void 0===t&&(t={}),(0,l().withBaseUrl)(e,t)}},96:function(e,t,n){"use strict";var a=n(0),i=Object(a.createContext)(void 0);t.a=i},97:function(e,t,n){"use strict";var a=n(0),i=n(96);t.a=function(){var e=Object(a.useContext)(i.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},98:function(e,t,n){"use strict";var a=n(0),i=n.n(a),l=n(97),r=n(94),o=n(48),s=n.n(o),c=37,b=39;t.a=function(e){var t=e.block,n=e.children,o=e.defaultValue,d=e.values,p=e.groupId,u=Object(l.a)(),O=u.tabGroupChoices,m=u.setTabGroupChoices,h=Object(a.useState)(o),j=h[0],f=h[1],g=Object(a.useState)(!1),v=g[0],y=g[1];if(null!=p){var N=O[p];null!=N&&N!==j&&d.some((function(e){return e.value===N}))&&f(N)}var T=function(e){f(e),null!=p&&m(p,e)},w=[],E=function(e){e.metaKey||e.altKey||e.ctrlKey||y(!0)},x=function(){y(!1)};return Object(a.useEffect)((function(){window.addEventListener("keydown",E),window.addEventListener("mousedown",x)}),[]),i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(r.a)("tabs",{"tabs--block":t})},d.map((function(e){var t=e.value,n=e.label;return i.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":j===t,className:Object(r.a)("tabs__item",s.a.tabItem,{"tabs__item--active":j===t}),style:v?{}:{outline:"none"},key:t,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case b:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case c:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(w,e.target,e),E(e)},onFocus:function(){return T(t)},onClick:function(){T(t),y(!1)},onPointerDown:function(){return y(!1)}},n)}))),i.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(n).filter((function(e){return e.props.value===j}))[0]))}},99:function(e,t,n){"use strict";var a=n(0),i=n.n(a);t.a=function(e){return i.a.createElement("div",null,e.children)}}}]);
[{"title":"Hello","type":0,"sectionRef":"#","url":"blog/hello-world","content":"Welcome to this blog. This blog is created with Docusaurus 2 alpha.This is a test post.A whole bunch of other information."},{"title":"Hola","type":0,"sectionRef":"#","url":"blog/hola","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"},{"title":"Welcome","type":0,"sectionRef":"#","url":"blog/welcome","content":"Blog features are powered by the blog plugin. Simply add files to the blog directory. It supports tags as well!Delete the whole directory if you don't want the blog features. As simple as that!"},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs","content":"Welcome to the Leaf's Documentation!AgTech developers use our APIs to access clean, standardized, and aggregated Agriculture data from a wide variety of sources. These quickstart tutorials are written to help get you started accessing data quickly, easily, and securely. We have implementation examples in cURL, NodeJS and Python!You can view code examples on your right.tipDon't hesitate in contacting us! connect@leafagriculture.com.br"},{"title":"Authentication","type":0,"sectionRef":"#","url":"docs/auth","content":""},{"title":"Create an account","type":1,"pageTitle":"Authentication","url":"docs/auth#create-an-account","content":"To access our API, you just have to register using this link. After confirming your email, you will be able to request an access token through this endpoint: Copyhttps://a.agrigate.io/api/authenticate You will receive an access token as response. All set! Include this token in your calls and you will have access to Leaf's API. The token lasts for 8h. After that, just make the same request to the same endpoint and you will get a new access token. JavaScriptPythonBashCopyvar request = require('request'); var headers = { 'Content-Type': 'application/json', 'Accept': 'application/json'}; var dataString = `{ \"username\": \"YOUR_EMAIL\", \"password\": \"YOUR_PASSWORD\", \"rememberMe\": true}`; var options = { url: 'https://a.agrigate.io/api/authenticate', method: 'POST', headers: headers, body: dataString}; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log('[Success] Server responded with:', body); } else { console.log('[Error] Server responded with:', body); }} request(options, callback); This request will return your access token to Leaf's API: Copy{ \"id_token\" : \"YOUR_TOKEN\"} "},{"title":"converter","type":0,"sectionRef":"#","url":"docs/converter","content":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/intro","content":"Welcome to the Leaf's Documentation!AgTech developers use our APIs to access clean, standardized, and aggregated Agriculture data from a wide variety of sources. These quickstart tutorials are written to help get you started accessing data quickly, easily, and securely. We have implementation examples in cURL, NodeJS and Python!You can view code examples on your right.tipDon't hesitate in contacting us! connect@leafagriculture.com.br"},{"title":"Satellite","type":0,"sectionRef":"#","url":"docs/satellite","content":""},{"title":"About","type":1,"pageTitle":"Satellite","url":"docs/satellite#about","content":"Our API returns processed, cropped, and color-corrected RGB and NDVI images.  All HTTP methods should be prepended by this service's endpoint: Copyhttps://a.agrigate.io/services/satellite/api This service has the following endpoints available: CopyGET /fieldsGET /fields/{id}GET /fields/{id}/processesPOST /fieldsPUT /fields/{id}DELETE /fields/{id}  "},{"title":"Endpoints","type":1,"pageTitle":"Satellite","url":"docs/satellite#endpoints","content":""},{"title":"GET /fields","type":1,"pageTitle":"Satellite","url":"docs/satellite#get-fields","content":"Returns paged results for all fields registered. It returns a list of JSON objects like so: Copy[ { \"externalId\": \"your field id\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [...] } }, # etc...] externalId: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field JavaScriptPythonBashCopyconst axios = require('axios')const TOKEN = 'YOUR_TOKEN' const endpoint ='https://a.agrigate.io/services/satellite/api/fields'const headers = { 'Authorization': `Bearer ${TOKEN}` } axios.get(endpoint, { headers }) .then(res => console.log(res.data)) .catch(console.error)  "},{"title":"GET /fields/{id}","type":1,"pageTitle":"Satellite","url":"docs/satellite#get-fieldsid","content":"Fetches a field entry based on its external id. It returns a single JSON object with the following entries (like each item from GET /fields results): Copy{ \"externalId\": \"your field id\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [...] }} id: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field JavaScriptPythonBashCopyconst axios = require('axios')const TOKEN = 'YOUR_TOKEN' const endpoint ='https://a.agrigate.io/services/satellite/api/fields/YOUR_ID'const headers = { 'Authorization': `Bearer ${TOKEN}` } axios.get(endpoint, { headers }) .then(res => console.log(res.data)) .catch(console.error)  "},{"title":"GET /fields/{id}/processes","type":1,"pageTitle":"Satellite","url":"docs/satellite#get-fieldsidprocesses","content":"Returns all processes already handled by our service. A process is created by our servers whenever there is a new satellite image that intersects with one of your registered fields. This endpoint is used to access all images that each process generates. The returned payload is like so: Copy[ { \"date\": \"2020-06-03T19:03:57.882Z\", \"clouds\": 0, \"bucketName\": \"sentinel-s2-l1c\", \"bucketKey\": \"tiles/10/S/FH/2020/6/3/0\", \"bucketRegion\": \"eu-central-1\", \"status\": \"SUCCESS\", \"coverage\": 100, \"images\": [ { \"url\": \"url.to.your.image.tif\", \"type\": \"tif\", \"resolution\": 20 }, # etc... ] }, # etc...] date: the date of the satellite imageclouds: cloud coverage percentage of the field, from 0 to 100bucketName: name of Sentinel's bucket where the original tile is. Usually sentinel-s2-l1cbucketRegion: AWS region of original image's bucket. Usually eu-central-1bucketKey: base path of original satellite imagestatus: status of the process. It will be either SUCCESS or FAILUREcoverage: data coverage percentage of the field, from 0 to 100images: each image in this list will have the following data:url: URL of the imagetype: the type of the image. One of tif, ndvi, png and tif_colorizedresolution: resolution, in meters, of the image. See table below Usually, we generate a total of 17 images for each intersected field. A GeoTiff for each band from Sentinel; some utility images as well, RGB and NDVI. The following table shows all the images with its resolutions and types:  Name Resolution Type B01.tif 60 meters tif B02.tif 10 tif B03.tif 10 tif B04.tif 10 tif B05.tif 20 tif B06.tif 20 tif B07.tif 20 tif B08.tif 10 tif B09.tif 60 tif B10.tif 60 tif B11.tif 20 tif B12.tif 20 tif NDVI.png NULL png NDVI.tif 10 ndvi NDVI_color.tif 10 tif_colorized RGB.png NULL png RGB.tif 10 tif_colorized  PNG files do not have resolution because they are scaled up by 800%, so each pixel does not represent the correct size anymore. We generate a colorized NDVI_color.tif using a custom built color ramp. See the image below. If you want to use your own ramp, we recommend using NDVI.tif, which is a pre calculated NDVI file. You can import it into any GIS software, like QGis, and use it as you please.  JavaScriptPythonBashCopyconst axios = require('axios')const TOKEN = 'YOUR_TOKEN' let endpoint = 'https://a.agrigate.io/services/satellite/api' + '/fields/YOUR_ID/processes'const headers = { 'Authorization': `Bearer ${TOKEN}` } axios.get(endpoint, { headers }) .then(res => console.log(res.data)) .catch(console.error)  "},{"title":"POST /fields","type":1,"pageTitle":"Satellite","url":"docs/satellite#post-fields","content":"Creates a new field entry in the database. A field will start to be monitored as soon as it is added to our database. It will be continuously monitored for as long as it is in there. If you want to stop this process, you should remove the field from the database entirely. Use a DELETE HTTP request. cautionNote that the field deletion cascades to all other tables. Meaning that all processed images will be lost. Payload# The payload of this object should be like the following: Copy{ \"externalId\": \"your field id\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [...] }} externalId: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field There are some limitations regarding the geometry of the field. It cannot be bigger than 50 million square meters and it cannot have a perimeter bigger than ~28 thousand meters. JavaScriptPythonBashCopyconst axios = require('axios')const TOKEN = 'YOUR_TOKEN' let endpoint = 'https://a.agrigate.io/services/satellite/api/fields'const headers = { 'Authorization': `Bearer ${TOKEN}` } const data = { /* Your payload */ } axios.post(endpoint, { headers, data }) .then(res => console.log(res.data)) .catch(console.error)  "},{"title":"PUT /fields/{id}","type":1,"pageTitle":"Satellite","url":"docs/satellite#put-fieldsid","content":"Endpoint used to update the geometry of the field. You cannot update the external id. The payload is a single JSON object with an entry geometry which contains a MultiPolygon GeoJSON object. Again, the new geometry must respect the area and perimeter limits of POST /fields. JavaScriptPythonBashCopyconst axios = require('axios')const TOKEN = 'YOUR_TOKEN' let endpoint = 'https://a.agrigate.io/services/satellite/api/fields'const headers = { 'Authorization': `Bearer ${TOKEN}` } const data = { /* Your geometry */ } axios.post(endpoint, { headers, data }) .then(res => console.log(res.data)) .catch(console.error)  "},{"title":"DELETE /fields/{id}","type":1,"pageTitle":"Satellite","url":"docs/satellite#delete-fieldsid","content":"Deletes the field from our database. cautionBe careful when using this method. It will delete all the processed images from the database as well. JavaScriptPythonBashCopyconst axios = require('axios') const TOKEN = 'YOUR_TOKEN' const client = axios.create({ baseURL: 'https://a.agrigate.io', headers: {'Authorization': `Bearer ${TOKEN}`}}) client.delete('/fields/YOUR_ID') .then(res => console.log(res.statusCode)) .catch(console.error) "}]
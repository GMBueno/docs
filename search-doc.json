[{"title":"Hello","type":0,"sectionRef":"#","url":"blog/hello-world","content":"Welcome to this blog. This blog is created with Docusaurus 2 alpha. This is a test post. A whole bunch of other information.","keywords":""},{"title":"Hola","type":0,"sectionRef":"#","url":"blog/hola","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":""},{"title":"Welcome","type":0,"sectionRef":"#","url":"blog/welcome","content":"Blog features are powered by the blog plugin. Simply add files to the blog directory. It supports tags as well! Delete the whole directory if you don't want the blog features. As simple as that!","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs","content":"Welcome to Leaf's Documentation! Food and Agriculture developers use Leaf's API to access clean, standardized, and aggregated Farm data from all major sources. These quickstart tutorials are written to help you start accessing farm data quickly, easily, and securely. We have implementation examples in cURL, NodeJS and Python! You can view code examples on your right. tip Please don't hesitate to contact us with questions, suggestions, and more! connect@leafagriculture.com.br","keywords":""},{"title":"Authentication","type":0,"sectionRef":"#","url":"docs/auth","content":"Create an account# To access our API, you just have to register using this link. After confirming your email, you will be able to request an access token through this endpoint: Copy https://a.agrigate.io/api/authenticate You will receive an access token as response. All set! Include this token in your calls and you will have access to Leaf's API. The token lasts for 8h. After that, just make the same request to the same endpoint and you will get a new access token. JavaScriptPythonBash Copy var request =require('request'); var headers ={ 'Content-Type':'application/json', 'Accept':'application/json' }; var dataString =`{ \"username\": \"YOUR_EMAIL\", \"password\": \"YOUR_PASSWORD\", \"rememberMe\": true }`; var options ={ url:'https://a.agrigate.io/api/authenticate', method:'POST', headers: headers, body: dataString }; functioncallback(error, response, body){ if(!error && response.statusCode==200){ console.log('[Success] Server responded with:', body); }else{ console.log('[Error] Server responded with:', body); } } request(options, callback); This request will return your access token to Leaf's API: Copy { \"id_token\":\"YOUR_TOKEN\" }","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/intro","content":"Welcome to Leaf's Documentation! Food and Agriculture developers use Leaf's API to access clean, standardized, and aggregated Farm data from all major sources. These quickstart tutorials are written to help you start accessing farm data quickly, easily, and securely. We have implementation examples in cURL, NodeJS and Python! You can view code examples on your right. tip Please don't hesitate to contact us with questions, suggestions, and more! connect@leafagriculture.com.br","keywords":""},{"title":"Converters Service","type":0,"sectionRef":"#","url":"docs/converter","content":"File Conversion# If you want to allow users to upload machine files directly to your dashboard or to convert recommendations to a machine-readable format or have another use that requires file conversion, these converters will help. Roadmap Today, you have the option to use these converters: Shapefile -> ISOXMLCNHI -> GeoJSONTrimble -> GeoJSONShapefile -> GeoJSONGeoJSON -> Shapefile Shapefile -> ISOXML# Send this along with your zipped shapefile PythonBashJavaScript Copy var request = require('request'); var headers = { 'Authorization': 'Bearer YOUR_TOKEN' }; var options = { url: 'https://a.agrigate.io/quickstart/api/files/shapefile/isoxml', method: 'POST', headers: headers }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback); Returns status 200 and a TEXT link where you can download your converted file from Copy { \"uri\":\"https://leaf-isoxml.s3-us-west-2.amazonaws.com/output/3e1291e4-3026-4357-8bff-0e24feb79602.xml\" } This endpoint will convert a shapefile to ISOXML to be read by a wide variety of machines. This is commonly used for converting VRT prescription files to a machine readable format. Note that the return is plain text, not json. CNHI -> GeoJSON# Send this along with your zipped file PythonBashJavaScript Copy var request = require('request'); var headers = { 'Authorization': 'Bearer YOUR_TOKEN' }; var options = { url: 'https://a.agrigate.io/quickstart/api/files/cnhi', method: 'POST', headers: headers }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback); Returns status 200 and a link where you can download your converted file from Copy { \"uri\":\"https://cnhi-adapt-dev.s3-us-west-2.amazonaws.com/output/3190d2c5-1948-4621-92c5-6bb5c5d36ad1.json.gz\" } This endpoint will convert a CNHi .CN1 file to Leaf's geojson data model. To use, simply upload a zipped .CN1 folder. Trimble -> GeoJSON# Send this along with your zipped file PythonBashJavaScript Copy var request = require('request'); var headers = { 'Authorization': 'Bearer YOUR_TOKEN' }; var options = { url: 'https://a.agrigate.io/quickstart/api/files/trimble', method: 'POST', headers: headers }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback); Returns status 200 and a link where you can download your converted file from Copy { \"uri\":\"https://trimble-adapt-dev.s3-us-west-2.amazonaws.com/output/7fc72a96-86f6-4568-b730-a581f883509a.json.gz\" } This endpoint will convert a Trimble file to Leaf's geojson data model. To use, simply upload a zipped Trimble folder. Shapefile -> GeoJSON# Send this along with your zipped file PythonBashJavaScript Copy var request = require('request'); var headers = { 'Authorization': 'Bearer YOUR_TOKEN' }; var options = { url: 'https://a.agrigate.io/quickstart/api/converters/shapefile/geojson', method: 'POST', headers: headers }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback); Returns status 200 and a TEXT link where you can download your converted (json) file from Copy { \"uri\": \"https://converter-prod-conversionsbucket-somerandomstring.s3-us-west-2.amazonaws.com/somerandomstring.json\" } The input file must be a zip file. That is done because shapefile is a multi file standard. It is usually a set of 4 files: .dbf, .prj, .shp and .shx. The output file will be a GeoJSON file. GeoJSON -> Shapefile# Send this along with your (Geo)JSON PythonBashJavaScript Copy var request = require('request'); var headers = { 'Authorization': 'Bearer YOUR_TOKEN' }; var options = { url: 'https://a.agrigate.io/quickstart/api/converters/geojson/shapefile/', method: 'POST', headers: headers }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback); Returns status 200 and a TEXT link where you can download your converted file from Copy { \"uri\": \"https://converter-prod-conversionsbucket-somerandomstring.s3-us-west-2.amazonaws.com/somerandomstring.zip\" } The input file must be a .json GeoJSON file The output file will be a zipped file.","keywords":""},{"title":"Operations Service","type":0,"sectionRef":"#","url":"docs/operations","content":"Overview# Leaf's Operation Data API returns aggregated, cleaned, and standardized data from all major machine data brands in a simple JSON response. This tutorial will walk through how to create a Leaf user, securely authenticate with their chosen platforms, and receive auto-updating data from all of them with a single request. All HTTP methods should be prepended by this service's endpoint: Copy https://a.agrigate.io/services/services/operations/api This service has the following endpoints available: Copy GET /files GET /files/{id} GET /files/convertedBetween GET /files/operationsBetween GET /files/{id}/summary GET /files/{id}/images GET /files/{x}/{y}/{z}.{ext} POST /files POST /files/merge Endpoints# Here we list all the available endpoints from this microservice. For easily testing this microservice, we recomend to see our postman collection. GET /files# Return paged list of files from the current logged client that matches with the query parameters passed. All parameters are optional and calling this endpoint without any will return all results. Here are the supported parameters: userId, an UUIDprovider, one of the following strings: CNHIJohnDeereTrimbleClimateFieldView status, one of the following string: EMPTYDOWNLOADEDCONVERTEDFAILEDGENERATED_GEOJSONGENERATED_STANDARD_GEOJSONGENERATED_PNGSGENERATED_SUMMARY Example# Copy $ http GET /files provider==CNHI userId==SOME_USER_UUID Copy [ { \"id\":\"UUID\", \"fileName\":\"filename.zip\", \"providerFileId\":\"123456789\", \"providerName\":\"CNHI\", \"providerId\":2, \"originalUrl\":\"S3_URL\", \"rawGeojsonUrl\":\"S3_URL\", \"status\":\"FAILED\", \"leafUserId\":\"UUID\", \"apiOwnerUsername\":\"CLIENT\", \"fileType\":\"PRESCRIPTION\", \"convertedTime\":\"2020-04-23T13:56:02.68\", \"createdTime\":\"2020-04-16T21:14:03.518\", \"sizeInBytes\":123456789 } ] GET /files/convertedBetween# Return paged list of files converted inside a date range. Here are the supported parameters, both are optional: start, date time. Must be in the past.end, date time. Must be in the present or past. Example:# Copy $ http GET /files/convertedBetween start==2020-04-30T13:21:08+00:00 end==2020-04-29T13:21:08+00:00 Copy [ { \"id\":\"UUID\", \"fileName\":\"filename.zip\", \"providerFileId\":\"123456789\", \"providerName\":\"CNHI\", \"providerId\":2, \"originalUrl\":\"S3_URL\", \"rawGeojsonUrl\":\"S3_URL\", \"status\":\"FAILED\", \"leafUserId\":\"UUID\", \"apiOwnerUsername\":\"CLIENT\", \"fileType\":\"PRESCRIPTION\", \"convertedTime\":\"2020-04-23T13:56:02.68\", \"createdTime\":\"2020-04-16T21:14:03.518\", \"sizeInBytes\":123456789 } ] GET /files/operationsBetween# Return paged list of files with operations performed inside a date range. Here are the supported parameters, both are optional: start, date time. Must be in the past.end, date time. Must be in the present or past. Example:# Copy $ http GET /files/operationsBetween start==2020-04-30T13:21:08+00:00 end==2020-04-29T13:21:08+00:00 Copy [ { \"id\":\"UUID\", \"fileName\":\"filename.zip\", \"providerFileId\":\"123456789\", \"providerName\":\"CNHI\", \"providerId\":2, \"originalUrl\":\"S3_URL\", \"rawGeojsonUrl\":\"S3_URL\", \"status\":\"FAILED\", \"leafUserId\":\"UUID\", \"apiOwnerUsername\":\"CLIENT\", \"fileType\":\"PRESCRIPTION\", \"convertedTime\":\"2020-04-23T13:56:02.68\", \"createdTime\":\"2020-04-16T21:14:03.518\", \"sizeInBytes\":123456789 } ] POST /files/merge# Perform a merge between two or more files. Example:# Copy $ http POST /files/merge ids:='[\"ID_1\", \"ID_2\"]' If any of the file ids passed does not have the stdGeoJsonUrl entry, the call will result in 404. All files must have the same leafUserId. If not, it will result in 500. Response sample: Copy { \"id\":\"UUID\", \"status\":\"string\", \"stdGeojsonUrl\":\"S3_URL\" } DELETE /files/{id}# Delete a file entry by its id. Example:# Copy $ http DELETE /files/UUID GET /files/{id}# Returns a file entry by its id Example:# Copy $ http GET /files/UUID Copy { \"apiOwnerUsername\":\"string\", \"convertedTime\":\"2020-04-29T20:13:42.811Z\", \"createdTime\":\"2020-04-29T20:13:42.811Z\", \"endTime\":\"2020-04-29T20:13:42.811Z\", \"fileFormat\":\"string\", \"fileName\":\"string\", \"fileType\":\"string\", \"id\":\"UUID\", \"leafUserId\":\"UUID\", \"originalUrl\":\"string\", \"pngUrl\":\"string\", \"providerFieldId\":\"string\", \"providerFileId\":\"string\", \"providerId\":0, \"providerName\":\"string\", \"rawGeojsonUrl\":\"string\", \"sizeInBytes\":0, \"startTime\":\"2020-04-29T20:13:42.812Z\", \"status\":\"string\", \"stdGeojsonUrl\":\"string\" } GET /files/{id}/summary# Returns the summary entry given for the file. The summary is a single GeoJSON feature containing the convex hull of all operation data and some statistics calculated from it. Example: Copy $ http GET /files/{id}/summary GET /files/{id}/images# Returns the properties images for the file. Example: Copy $ http GET /files/{id}/images Copy [ { \"property\":\"elevation\", \"url\":\"PNG_URL.png\" }, { \"property\":\"targetRate\", \"url\":\"PNG_URL.png\" }, { \"property\":\"speed\", \"url\":\"PNG_URL.png\" }, { \"property\":\"distance\", \"url\":\"PNG_URL.png\" }, { \"property\":\"heading\", \"url\":\"PNG_URL.png\" }, { \"property\":\"appliedRate\", \"url\":\"PNG_URL.png\" } ] Note: The image entry it was only shown on this endpoint. Also, we provide an auxiliar XML tha helps GIS tools to locate the image. You just need to request for the disere png url with the .aux.xml suffix. GET /files/{x}/{y}/{z}.{ext}?leafUserId=1&property=speed# Returns an image of operations in the tile x/y/z filtered by property (obligatory) and other properties, like leafUserId. Example: Copy $ http GET /files/2051/3109/13.png?property=speed POST /files# Perform a file POST to operations-service and automatically process the received file. You will need to inform the leafUserId to associate this new file, the fileFormat, that must be one of: Copy SHAPEFILE, ADAPTADM, DATCLIMATE, CN1, TRIMBLE, ISO11783, GEOJSON And the file provider as: Copy CNHI, JohnDeere, Trimble, ClimateFieldView, Leaf Example:# To upload an SHAPEFILE named shapefile.zip, with the provider Leaf for the leafUserID b7bd056b-51c8-4433-9022-fbb2288ffbf4 you will need to perform the following curl: Copy $ curl --location --request POST 'https://a.agrigate.io/services/operations/api/files?'\\ 'leafUserId=b7bd056b-51c8-4433-9022-fbb2288ffbf4'\\ '&provider=Leaf&fileFormat=SHAPEFILE'\\ --header 'Authorization: Bearer {{YOUR_TOKEN}}'\\ --form 'file=@PATH/shapefile.zip' If you pass an invalid provider, or fileFormat, or leafUserId you will receive an HTTP 400 status response. Otherwise, you will get and 201 status and the following response: Response sample: Copy { \"message\":\"Your file is being processed and will be available in a few minutes\", \"id\":\"UUID\" }","keywords":""},{"title":"Satellite","type":0,"sectionRef":"#","url":"docs/satellite","content":"About# Our API returns processed, cropped, and color-corrected RGB and NDVI images. All HTTP methods should be prepended by this service's endpoint: Copy https://a.agrigate.io/services/satellite/api This service has the following endpoints available: Copy GET /fields GET /fields/{id} GET /fields/{id}/processes POST /fields PUT /fields/{id} DELETE /fields/{id} Endpoints# GET /fields# Returns paged results for all fields registered. It returns a list of JSON objects like so: Copy [ { \"externalId\":\"your field id\", \"geometry\":{ \"type\":\"MultiPolygon\", \"coordinates\":[...] } }, # etc... ] externalId: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' const endpoint ='https://a.agrigate.io/services/satellite/api/fields' const headers ={'Authorization':`Bearer ${TOKEN}`} axios.get(endpoint,{ headers }) .then(res=>console.log(res.data)) .catch(console.error) GET /fields/{id}# Fetches a field entry based on its external id. It returns a single JSON object with the following entries (like each item fromGET /fields results): Copy { \"externalId\":\"your field id\", \"geometry\":{ \"type\":\"MultiPolygon\", \"coordinates\":[...] } } id: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' const endpoint ='https://a.agrigate.io/services/satellite/api/fields/YOUR_ID' const headers ={'Authorization':`Bearer ${TOKEN}`} axios.get(endpoint,{ headers }) .then(res=>console.log(res.data)) .catch(console.error) GET /fields/{id}/processes# Returns all processes already handled by our service. A process is created by our servers whenever there is a new satellite image that intersects with one of your registered fields. This endpoint is used to access all images that each process generates. The returned payload is like so: Copy [ { \"date\":\"2020-06-03T19:03:57.882Z\", \"clouds\":0, \"bucketName\":\"sentinel-s2-l1c\", \"bucketKey\":\"tiles/10/S/FH/2020/6/3/0\", \"bucketRegion\":\"eu-central-1\", \"status\":\"SUCCESS\", \"coverage\":100, \"images\":[ { \"url\":\"url.to.your.image.tif\", \"type\":\"tif\", \"resolution\":20 }, # etc... ] }, # etc... ] date: the date of the satellite imageclouds: cloud coverage percentage of the field, from 0 to 100bucketName: name of Sentinel's bucket where the original tile is. Usuallysentinel-s2-l1cbucketRegion: AWS region of original image's bucket. Usually eu-central-1bucketKey: base path of original satellite imagestatus: status of the process. It will be either SUCCESS or FAILUREcoverage: data coverage percentage of the field, from 0 to 100images: each image in this list will have the following data: url: URL of the imagetype: the type of the image. One of tif, ndvi, png andtif_colorizedresolution: resolution, in meters, of the image. See table below Usually, we generate a total of 17 images for each intersected field. A GeoTiff for each band from Sentinel; some utility images as well, RGB and NDVI. The following table shows all the images with its resolutions and types: Name\tResolution\tTypeB01.tif\t60 meters\ttif B02.tif\t10\ttif B03.tif\t10\ttif B04.tif\t10\ttif B05.tif\t20\ttif B06.tif\t20\ttif B07.tif\t20\ttif B08.tif\t10\ttif B09.tif\t60\ttif B10.tif\t60\ttif B11.tif\t20\ttif B12.tif\t20\ttif NDVI.png\tNULL\tpng NDVI.tif\t10\tndvi NDVI_color.tif\t10\ttif_colorized RGB.png\tNULL\tpng RGB.tif\t10\ttif_colorized PNG files do not have resolution because they are scaled up by 800%, so each pixel does not represent the correct size anymore. We generate a colorized NDVI_color.tif using a custom built color ramp. See the image below. If you want to use your own ramp, we recommend using NDVI.tif, which is a pre calculated NDVI file. You can import it into any GIS software, like QGis, and use it as you please. JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' let endpoint ='https://a.agrigate.io/services/satellite/api'+ '/fields/YOUR_ID/processes' const headers ={'Authorization':`Bearer ${TOKEN}`} axios.get(endpoint,{ headers }) .then(res=>console.log(res.data)) .catch(console.error) POST /fields# Creates a new field entry in the database. A field will start to be monitored as soon as it is added to our database. It will be continuously monitored for as long as it is in there. If you want to stop this process, you should remove the field from the database entirely. Use a DELETE HTTP request. caution Note that the field deletion cascades to all other tables. Meaning that all processed images will be lost. Payload# The payload of this object should be like the following: Copy { \"externalId\":\"your field id\", \"geometry\":{ \"type\":\"MultiPolygon\", \"coordinates\":[...] } } externalId: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field There are some limitations regarding the geometry of the field. It cannot be bigger than 50 million square meters and it cannot have a perimeter bigger than ~28 thousand meters. JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' let endpoint ='https://a.agrigate.io/services/satellite/api/fields' const headers ={'Authorization':`Bearer ${TOKEN}`} const data ={/* Your payload */} axios.post(endpoint,{ headers, data }) .then(res=>console.log(res.data)) .catch(console.error) PUT /fields/{id}# Endpoint used to update the geometry of the field. You cannot update the external id. The payload is a single JSON object with an entry geometry which contains a MultiPolygon GeoJSON object. Again, the new geometry must respect the area and perimeter limits of POST /fields. JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' let endpoint ='https://a.agrigate.io/services/satellite/api/fields' const headers ={'Authorization':`Bearer ${TOKEN}`} const data ={/* Your geometry */} axios.post(endpoint,{ headers, data }) .then(res=>console.log(res.data)) .catch(console.error) DELETE /fields/{id}# Deletes the field from our database. caution Be careful when using this method. It will delete all the processed images from the database as well. JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' const client = axios.create({ baseURL:'https://a.agrigate.io', headers:{'Authorization':`Bearer ${TOKEN}`} }) client.delete('/fields/YOUR_ID') .then(res=>console.log(res.statusCode)) .catch(console.error)","keywords":""}]
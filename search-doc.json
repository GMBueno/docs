[{"title":"Never Gonna Give You Up","type":0,"sectionRef":"#","url":"blog/Welcome","content":"We're no strangers to love You know the rules and so do I A full commitment's what I'm thinking of You wouldn't get this from any other guy I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it And if you ask me how I'm feeling Don't tell me you're too blind to see Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you (Ooh, give you up) (Ooh, give you up) (Ooh) Never gonna give, never gonna give (Give you up) (Ooh) Never gonna give, never gonna give (Give you up) We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you -... ..- . -. ---","keywords":""},{"title":"Welcome","type":0,"sectionRef":"#","url":"docs/","content":"","keywords":""},{"title":"Welcome to Leaf's Documentation!","type":1,"pageTitle":"Welcome","url":"docs/#welcome-to-leafs-documentation","content":"Developers use Leaf's API to access clean, standardized, and aggregated Farm data from all major food & agriculture brands. Please see the Quickstart section to get started with sample farm data & popular use cases. We have implementation examples in cURL, NodeJS and Python! Getting Started Leaf's API abstracts and standardizes across agricultural data sources so you can focus on building value with farm data. There are just a few concepts that you need to get started and we provide sample data within new Leaf accounts to help you learn quickly. tip Below you'll find instructions using curl and python, and you may also follow along using our Leaf Postman collection. "},{"title":"Authentication","type":0,"sectionRef":"#","url":"docs/authentication","content":"To access our API, you just have to register using this link. After confirming your email, you will be able to request a token (JWT) through this endpoint: Copy https://api.withleaf.io/api/authenticate You will receive your Leaf Token as response. All set! Include this token in your API calls and you will have access to Leaf's API. Your Leaf Token lasts for 24h by default. Include \"rememberMe\": \"true\" in the json to make it last 30 days. After expiration, just make the same request to the same endpoint and you will get a new access token. cURLPythonJavaScript Copy curl -X POST \\ -H 'Content-Type: application/json'\\ -d '{ \"username\": \"username\", \"password\": \"password\" }'\\ 'https://api.withleaf.io/api/authenticate' This request will return your access token to Leaf's API: Copy { \"id_token\":\"YOUR_LEAF_TOKEN\" }","keywords":""},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/converters_overview","content":"","keywords":""},{"title":"Available conversions","type":1,"pageTitle":"Overview","url":"docs/converters_overview#available-conversions","content":"We currently have the following conversions available: From\tTogeojson\tshapefile, iso11783, png shapefile\tgeojson trimble\tgeojson cn1\tgeojson datclimate\tgeojson adaptadm\tgeojson "},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/converters_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Endpoints","url":"docs/converters_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/converters/api This service has the following endpoints available: Copy POST /{input}-{output} POST / "},{"title":"Endpoints","type":1,"pageTitle":"Endpoints","url":"docs/converters_endpoints#endpoints","content":"List of all the available endpoints. "},{"title":"POST /{input}-{output}","type":1,"pageTitle":"Endpoints","url":"docs/converters_endpoints#post-input-output","content":"Posts a file, passed as a multipart to the service. The file will be converted from the format specified in input to the output format. All The valid combinations of input and output are described in this table It is possible to link this conversion with a Leaf User created, passing his ID as a query parameter: leafUserId. But its use is not mandatory. Example# Copy curl -X POST \\ -H 'Content-Type: multipart/form-data'\\ -H 'Accept: application/json'\\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN'{\"type\":\"formData\"}\\ 'https://api.withleaf.io/services/converters/api/geojson-shapefile?leafUserId=uuid'\\ --form 'file=@path' Response sample: Copy { \"uri\":\"uri to an S3 bucket\", \"message\":\"Success\" } "},{"title":"POST /","type":1,"pageTitle":"Endpoints","url":"docs/converters_endpoints#post-","content":"It performs exactly the same as the previous endpoint, but, instead of passing variables in the path, you pass them via params. Like so: Example# Copy curl -X POST \\ --header 'Content-Type: multipart/form-data'\\ --header 'Accept: application/json'\\ --header 'Authorization: Bearer YOUR_LEAF_TOKEN'{\"type\":\"formData\"}\\ 'https://api.withleaf.io/services/converters/api/?input=geojson&output=shapefile&leafUserId=uuid'\\ --form 'file=@path' This example is equivalent to the example in the previous endpoint. The input and output obey the same rules as well. "},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/field_boundaries_overview","content":"Leaf's Field Boundaries API helps you import, export, create, and manage with Field Boundaries from all major agriculture brands. With this API you can synchronize fields across many platforms (e.g. John Deere and Climate FieldView), query different types of data from multiple providers by a boundary (imagery, machine operations, weather, etc.), and manage inconsistent boundaries from multiple providers. We provide a quickstart Postman collectionto help you get started. To make calls to Leaf's API, you will need a Leaf account. If you don't have one yet, please create your Leaf account and get your token. You can integrate with many different companies, and you only have to do it once per user. To connect, you just choose the company you wish to connect to and follow these 3 steps: Get the authentication URL of company you want to connect.Get your token and your user's token.Add credentials to Leaf. Now you can opt to connect more companies or Create a Leaf User and attach these credentials so Leaf can represent your user internally and allow you to query for them and their data. All set! Leaf automatically detects existing fields in each company's platform. This API works together with Leaf's Operations Data API. Operations performed in the fields will automatically be bound to the fields you create with this Field Boundaries API. Leaf uses a Grower/Farm/Field hierarchy to store data. Below please find a breakdown of these concepts and how they relate to one another: Fields are the central concept of this API. Every Field has boundaries which is the geometry that defines its borders. Most Fields are part of a Farm and every Farm can have one or more Fields.Farms can be grouped together under a Grower.A Grower (also known as Leaf User) is the data owner entity to which credentials are attached. A Season makes a relation among a Field, a Crop and a start and end dates.Files or Operations are the results of operations in a given Field.","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/introduction","content":"Welcome to Leaf's Documentation! Food and Agriculture developers use Leaf's API to access clean, standardized, and aggregated Farm data from all major sources. Use theQuickstart section to help you start accessing sample farm data quickly, easily, and securely. We have implementation examples in cURL, Python and NodeJS! tip Please don't hesitate to contact us to schedule a demo, ask a question, request sample data, or suggest a feature!","keywords":""},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/field_boundaries_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/fields/api See below the REST resources and their endpoints available in this service. Field Resource# Form of a Field: Copy { \"id\":\"UUID\", \"providerName\":\"JohnDeere\", \"providerFieldId\":\"UUID\", \"providerBoundaryId\":\"UUID\", \"type\":\"ORIGINAL\", \"leafUserId\":\"UUID\", \"organizationId\":\"str\", \"mergedFieldId\":[\"UUID\"], \"files\":[\"UUID\"], \"geometry\":{ \"type\":\"MultiPolygon\", \"coordinates\":[ [ [ [-93.48821327980518,41.77137549568163], [-93.48817333680519,41.77143534378164], [-93.48821327390516,41.76068857977987], [-93.48821327980518,41.77137549568163] ] ] ] }, } Copy GET /fields GET /fields/after GET /fields/before GET /fields/between GET /users/{leafUserId}/fields/{id} POST /users/{leafUserId}/fields/intersects POST /users/{leafUserId}/fields/disjoint POST /users/{leafUserId}/fields/integration POST /users/{leafUserId}/fields/intersect POST /users/{leafUserId}/fields/same POST /users/{leafUserId}/fields/{id}/integration DELETE /users/{leafUserId}/fields/{id} Operation Resource# Form of a Operation/File: Copy { \"id\":\"UUID\", \"operationType\":\"planted\", \"startTime\":\"ISO date-time\", \"endTime\":\"ISO date-time\", \"crops\":[\"str\"], \"varieties\":[\"str\"], \"providerFileId\":\"str\", \"provider\":\"Trimble\", \"leafUserId\":\"UUID\" } Copy GET /users/{leafUserId}/fields/{fieldId}/operations GET /users/{leafUserId}/fields/{fieldId}/operations/{id} "},{"title":"Endpoints","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#endpoints","content":"Here we list all the available endpoints from this microservice. For easily testing it, we recommend to see our Postman collection. "},{"title":"GET /fields","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-fields","content":"Gets a paged list of Fields. It is possible to filter the results by passing some query parameters. They are listed below. leafUserId, only matches files from this user (string).operationtype, one of the following values: harvested, planted,applied, other (string).operationProvider, filter by the provider. Currently we support the following providers: CNHI, JohnDeere, Trimble and ClimateFieldView(string).operationCrop, provider's identifier crop id. Requires operationProvider(string).operationVariety provider's identifier variety name/code. RequiresoperationProvider.operationStartTime, as ISO 8601 date to filter by the operation's start time.operationEndTime, as ISO 8601 date to filter by the operation's end time. If some operation parameter is passed, then the response will include the entry\"files\", otherwise such entry won't be present. You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetchedsize, an integer specifying the size of the page Response# A JSON array containing Fields. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/fields' "},{"title":"GET /fields/{id}","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-fieldsid","content":"Gets a single Field by its id. Response# A single Field as a JSON object. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{id}' "},{"title":"GET /fields/before","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-fieldsbefore","content":"Gets a list of all the Fields created before the instant given in the query parameter instant (ISO date-time format). It must be a time in the past. Response# A JSON list of Fields. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/fields/before?instant=<END TIME>' "},{"title":"GET /fields/after","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-fieldsafter","content":"Gets a list of all the fields created after the instant given in the query parameter instant (ISO date-time format). It must be a time in the past. Response# A JSON list of Fields. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/fields/after?instant=<END TIME>' "},{"title":"GET /fields/between","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-fieldsbetween","content":"Gets a list of all the Fields created between the instants given in the query parameters start and end. Both in ISO date-time format. They respectively must be in the past and in the past or present. Response# A JSON list of Fields. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/fields/between?start=<START TIME>&end=<END TIME>' "},{"title":"DELETE /users/{leafUserId}/fields/{id}","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#delete-usersleafuseridfieldsid","content":"Deletes the field with the given id. "},{"title":"POST /users/{leafUserId}/fields","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#post-usersleafuseridfields","content":"Creates a Field for the user leafUserId. A resquest body must be provided containing the an entry \"geometry\", which represents the boundaries of the Field being created as a GeoJSON geometry (it must be a \"MultiPolygon\"). The entry \"id\" is optional. If no id is provided, an UUID will be generated. The Field id CAN NOT be updated. Request body example: Copy { \"geometry\":{ \"type\":\"MultiPolygon\", \"coordinates\":[ [ [ [-93.48821327980518,41.77137549568163], [-93.48817333680519,41.77143534378164], [-93.48821327390516,41.76068857977987], [-93.48821327980518,41.77137549568163] ] ] ] } } Response# A Field as a JSON object. cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"geometry\": { \"type: \"MultiPolygon\", \"geometry\": [...] } }' 'https://api.withleaf.io/services/fields/api/fields/users/{leafUserId}/{id}' "},{"title":"POST /users/{leafUserId}/fields/intersect","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#post-usersleafuseridfieldsintersect","content":"Gets a GeoJSON MultiPolygon corresponding to the intersection of the Fields specified by the given id's. Such Field id's goes in a list, in the request body. Request body example: Copy { \"id\":[\"UUID1\",\"UUID2\"] } Response# A JSON in the format of a GeoJSON geometry. Copy { \"geometry\":{ \"type\":\"MultiPolygon\", \"coordinates\":[ [ [ [-93.48821327980518,41.77137549568163], [-93.48817333680519,41.77143534378164], [-93.48821327390516,41.76068857977987], [-93.48821327980518,41.77137549568163] ] ] ] } } "},{"title":"POST /fields/query/intersects","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#post-fieldsqueryintersects","content":"Gets a list of fields that intersects with the GeoJSON MultiPolygon sent in the request body. Response# A JSON list of Fields. cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"geometry\": { \"type: \"MultiPolygon\", \"geometry\": [...] } }' 'https://api.withleaf.io/services/fields/api/fields/query/intersects' "},{"title":"POST /users/{leafUserId}/fields/same","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#post-usersleafuseridfieldssame","content":"Gets a boolean value answering if the Fields specified by a list of Field id's sent in the request body have the same values for their vertices, in exactly the same order. "},{"title":"POST /users/{leafUserId}/fields/disjoint","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#post-usersleafuseridfieldsdisjoint","content":"Gets a boolean value answering if the fields specified by a list of field id's in the request body are disjoint. "},{"title":"POST /users/{leafUserId}/fields/integration","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#post-usersleafuseridfieldsintegration","content":"Uploads fields to providers. Currently we only support Climate FieldView. New integrations will come soon. Request body format: Copy { \"fields\":[\"UUID\"], \"providers\":[\"ClimateFieldView\"] } Response# A JSON in the followin format. Copy { \"UUID\":{ \"ClimateFieldView\":{ \"id\":\"0cb726c8-aff0-415a-9de3-a04b627008dd\" }, }, } "},{"title":"GET /users/{userId}/fields/{fieldId}/operations","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-usersuseridfieldsfieldidoperations","content":"Gets a paged list of all operation files of the Field specified by the URL parameter fieldId. It is possible to filter the results by passing some query parameters. They are listed below. operationtype, one of the following values: harvested, planted,applied, other (string).provider, filter by the provider. Currently we support the following providers: CNHI, JohnDeere, Trimble and ClimateFieldView (string).crop, provider's identifier crop id. Requires operationProvider (string).variety provider's identifier variety name/code. RequiresoperationProvider.startTime, as ISO 8601 date to filter by the operation's start time.endTime, as ISO 8601 date to filter by the operation's end time. You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetchedsize, an integer specifying the size of the page Response# A JSON array of Files. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{userId}/fields/{fieldId}/operations' "},{"title":"GET /users/{userId}/fields/{fieldId}/operations/{id}","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-usersuseridfieldsfieldidoperationsid","content":"Gets a single Operation File of a field by its id. Response# A single Operation File. JavaScriptPythonBash Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://a.agrigate.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations/{id}' [2]: https://tools.ietf.org/html/rfc7946 --> "},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/operations_overview","content":"","keywords":""},{"title":"Roadmap","type":1,"pageTitle":"Overview","url":"docs/operations_overview#roadmap","content":"Today, you can connect to these companies: John DeereClimate FieldViewCNHiTrimble Coming in the third quarter of 2020: RavenAGCO Coming in the fourth quarter of 2020: AgLeaderStara We also provide our Leaf Postman collection so you can follow along easily. "},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/operations_postman","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Overview","url":"docs/operations_postman#overview","content":"Leaf's Operation Data API returns aggregated, cleaned, and standardized data from all major machine data brands in a simple JSON response. This tutorial will walk through how to create a Leaf user, securely authenticate with their chosen platforms, and receive auto-updating data from all of them with a single request. We also provide a quickstart Postman collection so you can follow along easily. To make calls to Leaf's API, you will need a Leaf account. If you don't have one yet, please create your Leaf account and get your token. You can integrate with many different companies, and you only have to do it once for each user. To connect, you just choose the company you wish to connect to and follow these 3 steps: Get the authentication URL of company you want to connect toGet yours and your user's tokensAdd credentials to Leaf Now you can opt to connect to more companies or Create a Leaf User and attach these credentials, so that Leaf can represent your user internally and you can query specifically for them and their data. All set! Leaf automatically detects and starts processing new files. You can access in \"Get Operation Files\". "},{"title":"Roadmap","type":1,"pageTitle":"Overview","url":"docs/operations_postman#roadmap","content":"Today, you can to connect to these companies: John Deere (Medium)Climate FieldView (Medium)CNHiTrimble Coming in the third quarter of 2020: RavenAGCO Coming in the fourth quarter of 2020: AgLeaderStara "},{"title":"John Deere","type":1,"pageTitle":"Overview","url":"docs/operations_postman#john-deere","content":"This section will show you how you can integrate Leaf's API with you John Deere account and start using our operations service. Grab our quickstartPostman collection and follow along! 1. Get John Deere auth URL# In Step 1 we will be generating tokens from John Deere. The goal In step 2 is we will get our John Deere token_id and token_secret. Token Verifier# In step 1 we will get a temporary \"token verifier\" from John Deere that confirms an user’s authentication of your application to access their John Deere data and generate credentials. We get that verifier by going through their authentication flow (OAuth2). Before generating the authentication URL, please: Update current value of jd_client_key to your app's client key on John DeereUpdate current value of jd_client_secret to your app's client secret on John DeereUpdate current value of jd_callback_url to your app's callback_url on John Deere Then, to generate the authentication URL your application will send to your user so they can authorize access to their account files you can use the included step 2 in the Postman Collection. Change client_key and client_ secretvariables to yours received from John Deere when you created an app on your developer account with them and redirect_uri to a uri the \"token verifier\" will be sent after the user authorizes your application. Hit Send. Redirect your user to the url included in the response. They will authenticate and be redirected to the redirect_url. Copy the entire url you were redirected to. It looks like: Copy https://leafagriculture.com.br/?oauth_token=TOKEN&oauth_verifier=CODE Paste it in the environment variable jd_response_url. 2. Get John Deere Tokens# After updating the jd_response_url in Postman you can submit your credentials and receive your tokens. Hit Send token_id and token_secret_key will be automatically transferred tojd_token_id and jd_token_secret environment variables and will be used in the next step. 3. Add John Deere credentials# Now we can create a Developer-User pair credentials ID that will allow you to access your user’s John Deere data. We first add the John Deere credentials to Leaf API. Hit Send All the info needed has already been filled automatically in Step 2. An id for the credentials you just created will be returned. This id will be automatically transferred to the value of jd_credentials_id to be used in the next step. "},{"title":"Climate Field View","type":1,"pageTitle":"Overview","url":"docs/operations_postman#climate-field-view","content":"Grab our quickstart Postman collection and follow along! 1. Get Climate Field View auth URL# We will be generating a url to redirect your user to authenticate with Climate. Update environment variables cfv_client_id and cfv_client_secret to your Climate Field View developer account credentials. Update environment variable cfv_redirect_url to your application's backend Redirect your user to the script's output url. They will authenticate and be redirected to the redirect_uri. A code will be sent to that cfv_redirect_url. We will need this code Step 2. Copy the code value. note: this code expires after 1 minute. Paste code value to environment variable cfv_code 2. Get Climate Field View tokens# Hit \"Send\" A lot of information will be returned. The important ones are access_tokenand refresh_token. These will be automatically transferred tocfv_access_token and cfv_refresh_token environment variables and will be used in the next step. 3. Add Climate Field View credentials# Now we can create a Developer-User pair credentials ID that will allow you to access your user’s Climate data. We first add the Climate credentials to Leaf API, to do that: Hit \"Send\" An id for the credentials you just created will be returned. This id will be automatically transferred to the value of cfv_credentials_id to be used in the next step. "},{"title":"Leaf User","type":1,"pageTitle":"Overview","url":"docs/operations_postman#leaf-user","content":"Create Leaf User# Now we have to attach credentials to a Leaf User. To do so, we can create a Leaf user and attach our John Deere and/or Climate Field View credentials via the credentials id. We can also attach credentials from other companies to this same user to query all available data by Grower/Farm/Field regardless of brand. Update (optional) fields \"address\", \"email\", \"name\" and \"phone\" with your user's information. We have automatically included our jd_credentials_id to this call and attached it to this user. Hit \"Send\" Along with other information returned, there is an \"id\". This \"id\" is theleaf_user_id that will be used in the next (final) Step to query and access files. Update Leaf User# To update a Leaf User, let's say to add another provider credentials or change the user's address, we can use this PUT request. Since this method overwrites, remember to send all the user's information along with the information you want to add or update. For example, if you want to add John Deere credentials to a user that already has ClimateFieldView credentials, remember to specify both credentials ids. Get specific Leaf User# Get specific Leaf User With this endpoint you can query all information on a specific Leaf User, such as their address, email, credentials, etc. To do so, update the value of the environment variable leaf_user_id to the Leaf User id you want to query. Gel all Leaf Users# Get all Leaf Users With this endpoint you can query all information on all your Leaf Users, such as their address, email, credentials, etc. Just hit 'send'. "},{"title":"Query Operations by Field","type":1,"pageTitle":"Overview","url":"docs/operations_postman#query-operations-by-field","content":"To query all operations that happened in a specific field (step 2), we first need to create that field (step 1). Then, Leaf will automatically detect operations of that field based on the operations' and on the field's coordinates. This process usually takes about 30 minutes. 1. Create Field# Here we need to specify a leafUserId (that will be the Leaf User owner of that field), a externalId (that will be the name we give to the field) and the geojson geometry of the field (location). After creating the field we can query it (step 2) 2. Get operations' ids by Field# To query all operations that happened in a specific field, just update the environment variable field_external_id to the field id you want to query files. "},{"title":"Merge Operation Files","type":1,"pageTitle":"Overview","url":"docs/operations_postman#merge-operation-files","content":"1. Merge files# Merging files with Leaf is a very simple process. You just have to list, in the request json body, the ids of the files you want to merge. Make sure the operations are of the same type (APPLIED or HARVESTED or PLANTED), so the results are consistent. After that, just hit \"send\" and an id for that merged file will be returned. You can query that file as any other. It will be listed when you query for all files and can also be queried specifically by its id 2. Query & access specific file# You can query a merged file as any other. It will be listed when you query for all files and can also be queried specifically by its id. So this request is the same as seen on \"Get Operation Files\". You just have to update the environment variable \"id\" to the id of the merged file. Keep in mind that merging files is processing-heavy and may take about 20 minutes to finish. "},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/operations_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/operations/api This service has the following endpoints available: Copy GET /files GET /files/{id} GET /files/{id}/summary GET /files/{id}/images POST /files POST /files/merge DELETE /files/{id} "},{"title":"Endpoints","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#endpoints","content":"Here we list all the available endpoints from this microservice. For easily testing it, we recommend to see our Postman collection. requires Leaf User with credentials To have access to operation files, you will need a Leaf User with valid credentials from the provider you want to access data. If you don't have a Leaf User or you have not connected it with any provider yet, see how to create a Leaf Useror how to add credentials to a Leaf User. "},{"title":"GET /files","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#get-files","content":"Gets a paged list of files that belong to the current logged in user. It is possible to filter the results by passing some query parameters. They are listed below. leafUserId, only matches files from this userprovider, filter by the provider. Currently, we support the following providers: CNHI, JohnDeere, Trimble and ClimateFieldViewstatus, you can match the step of the process by passing one of the following: processed, failed or processingorigin, files have different origins in our services. You can filter by its origin using one of the following: provider, automerged, merged,uploadedorganizationId, as the provider organizationId (only available for JohnDeere files)createdTime, as ISO 8601 date to filter by the file's creation timeoperationStartTime, as ISO 8601 date to filter by the operation's start timeoperationEndTime, as ISO 8601 date to filter by the operation's end time You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetchedsize, an integer specifying the size of the page cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN'\\ 'https://api.withleaf.io/services/operations/api/files' It returns a JSON object like the following: Copy [ { \"id\":\"UUID\", \"fileName\":\"string\", \"provider\":\"string\", \"organizationId\":\"string\", \"fileType\":\"string\", \"fileFormat\":\"string\", \"sizeInBytes\":0, \"originalFile\":\"string\", \"rawGeojson\":\"string\", \"standardGeojson\":\"string\", \"zippedPNGs\":\"string\", \"leafUserId\":\"UUID\", \"apiOwnerUsername\":\"string\", \"summary\":\"Feature\", \"sourceFiles\":[], \"status\":\"string\", \"origin\":\"string\", \"createdTime\":\"2020-04-29T20:13:42.811Z\", \"operationEndTime\":\"2020-04-29T20:13:42.811Z\", \"operationStartTime\":\"2020-04-29T23:13:42.811Z\" }, ... ] The sourceFiles entry is a list of file's ids that were used to create the file. It will appear only in merge and automerged files. "},{"title":"GET /files/{id}","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#get-filesid","content":"Gets a single file by its id. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}' Returns a single JSON object: Copy { \"id\":\"UUID\", \"fileName\":\"string\", \"provider\":\"string\", \"organizationId\":\"string\", \"fileType\":\"string\", \"fileFormat\":\"string\", \"sizeInBytes\":0, \"originalFile\":\"string\", \"rawGeojson\":\"string\", \"standardGeojson\":\"string\", \"zippedPNGs\":\"string\", \"leafUserId\":\"UUID\", \"apiOwnerUsername\":\"string\", \"summary\":\"Feature\", \"sourceFiles\":[], \"status\":\"string\", \"origin\":\"string\", \"createdTime\":\"2020-04-29T20:13:42.811Z\", \"operationEndTime\":\"2020-04-29T20:13:42.811Z\", \"operationStartTime\":\"2020-04-29T23:13:42.811Z\" } "},{"title":"GET /files/{id}/summary","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#get-filesidsummary","content":"Gets the summary, if available, for the file id. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/summary' Returns a single GeoJSON feature containing the convex hull of all operation data and some statistics calculated from it. Copy { \"type\":\"Feature\", \"properties\":{ # these properties and more \"totalDistance\":19194.943013290438, \"operationType\":\"harvested\", \"totalArea\":131638.75702051684 }, \"geometry\":{ \"type\":\"MultiPolygon\", \"coordinates\":[...] } } "},{"title":"GET /files/{id}/images","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#get-filesidimages","content":"Gets a list of PNG images generated from the operation's file properties. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/images' Returns a JSON list of the following format: Copy [ { \"property\":\"elevation\", \"ramp\":{ \"0%\":[200,0,0], \"35%\":[255,40,0], \"45%\":[255,150,0], \"55%\":[255,240,0], \"65%\":[0,230,0], \"75%\":[0,190,0], \"100%\":[0,130,0], \"nv\":[0,0,0,0] }, \"url\":\"string\" }, ... ] The property refers to the property extracted from files' data to generate the image. In the example above, the image would represent the elevation. The ramp is the color ramp used to generate the image. The percentages correspond to the minimum (0%) and maximum (100%) values in the image. The listed values correspond to RGB values used. The nv refers to no value. It is used internally to make the image transparent on places without data. Currently, this ramp is the same in all images processed. We also generate an auxiliary xml with geographic information to handle this image on GIS environments. You just need to append the \".aux.xml\" string to the png url. "},{"title":"POST /files","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#post-files","content":"Posts/creates a new file in our server. This endpoint receives three required query parameters. A leafUserId, fileFormat andprovider. The fileFormat must be one of the following: Copy ADAPTADM CN1 DATCLIMATE GEOJSON ISO11783 SHAPEFILE TRIMBLE The provider must be one of the following: Copy Leaf ClimateFieldView CNHI JohnDeere Trimble cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -F 'file=shapefile.zip' \\ 'https://api.withleaf.io/services/operations/api/files?' \\ 'fileFormat=SHAPEFILE&provider=JohnDeere&leafUserId=id' Returns a single JSON object: Copy { \"message\":\"Your file is being processed and will be available in a few minutes\", \"id\":\"id\" } After a few minutes, you can consult the result of Leaf processing over this file by performing GET consults in this. "},{"title":"POST /files/merge","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#post-filesmerge","content":"Posts a merge operation to our server. A merge operation is performed asynchronously. This call will return immediately with the newly created file entry, but at this point, the file is not already processed and available. You will need to make a new GET /files request for the new id and check the status. A status value of processed means the file is done merging. A merge process has some validations, the files passed must belong to the same leafUserId, be of the same operation type and have the status as processed. If any of those filters fail, the endpoint will result in HTTP 400 error. It receives a single JSON object with the ids entry. Example: Copy { \"ids\":[\"id1\",\"id2\",\"so on\"] } cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"ids\": [ \"id1\", \"id2\" ] }' 'https://api.withleaf.io/services/operations/api/files/merge' Returns a single JSON object: Copy { \"id\":\"id\", \"status\":\"SENT_TO_MERGE\" } After a few minutes, you can consult the result of Leaf processing over this file by performing GET consults in this. "},{"title":"Quickstart","type":0,"sectionRef":"#","url":"docs/quickstart","content":"","keywords":""},{"title":"Leaf Quickstart","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#leaf-quickstart","content":"This quickstart tutorial is written help you quickly experience and start building with Leaf. First, please register on our website to receive your credentials. We've included sample data in your account so you can begin querying data via Leaf immediately. Leaf's Postman collection Below you'll find instructions using curl and python, and we've also built a Postman collection to accompany this tutorial. Please find it here: Leaf Postman collection "},{"title":"Authentication","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#authentication","content":"After creating and confirming your account, the first step is to authenticate with your email and password to retrieve an API token. This token is what we'll use in subsequent steps to talk to the API. Be sure to keep a copy of this token for the remaining steps. cURLPython Copy curl -X POST \\ -H 'Content-Type: application/json'\\ -d '{ \"username\":\"username\", \"password\":\"password\", \"rememberMe\":\"true\" }'\\ 'https://api.withleaf.io/api/authenticate' "},{"title":"Get sample Field with attached operations","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-field-with-attached-operations","content":"Inside your account, we've created a sample LeafUser and populated it with data. Let's take a look at the fields endpoint to see the sample field: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN'\\ 'https://api.withleaf.io/services/satellite/api/fields' It returns a JSON object representing the Fields and you can see that there are operations ids attached. Next section will explain how to get the operations by those ids. "},{"title":"Get all sample operation files","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-all-sample-operation-files","content":"Next, let's look at operations data. 'Operations' refers to the data collected when a machine and any implements performed an operation on a farm. This command will list operations files available across your whole account: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN'\\ 'https://api.withleaf.io/services/operations/api/files' "},{"title":"Get specific sample operation file","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-specific-sample-operation-file","content":"Now that you have a file ID, you can query for the operations data itself and a summary as well. cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN'\\ 'https://api.withleaf.io/services/operations/api/files/{id}' "},{"title":"Get sample operation file summary","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-operation-file-summary","content":"cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN'\\ 'https://api.withleaf.io/services/operations/api/files/{id}/summary' "},{"title":"Get sample operation file image","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-operation-file-image","content":"You may have already noticed that we're seeing a lot of operations files for this one field and the timestamps span just a few days. This is because we're looking at multiple files output from a machine that effectively represent one large operation - a harvest. Before we talk about merging these pieces into a single operation, let's look at an image from one of the pieces: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN'\\ 'https://api.withleaf.io/services/operations/api/files/{id}/images' "},{"title":"Get sample merged operation file","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-merged-operation-file","content":"A single strip appears in that image which is no mistake. It's also not as useful as seeing the whole operation across the whole field! To solve this, we allow you to request a merge of operations data and produce images for data of the same type and timeframe. The sample data already includes a merged file. Let's take a look at that merged harvesting image which is colored to indicate the range of wet mass collected. First, let's find the merged file by simply adding a parameter to filter to origin=merged cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN'\\ 'https://api.withleaf.io/services/operations/api/files?origin=merged' And finally, use that file ID to retrieve a list of images, one for each operation property. From this response, you can load one of the sample images: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN'\\ 'https://api.withleaf.io/services/operations/api/files/{id}/images' "},{"title":"Get sample satellite imagery","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-satellite-imagery","content":"Finally, let's take a look at some satellite imagery. Using data from Sentinel-2, we produce NDVI images for fields you define to be monitored. We can pull up the sample NDVI image like this: Finally, let's take a look at some satellite imagery. Using data from Sentinel-2, we produce NDVI images for fields you define to be monitored. First we'll list the fields being monitored from the satellite service: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN'\\ 'https://api.withleaf.io/services/satellite/api/fields/' And then we can pull up the sample NDVI image of the sample field like this: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN'\\ 'https://api.withleaf.io/services/satellite/api/fields/{field_id}/processes' "},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/satellite_overview","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Overview","url":"docs/satellite_overview#about","content":"Using Leaf's Satellite service you will be able to easily implement a satellite imagery program and compare the field health evolution over time. Leaf's service uses Sentinel-2 data which has the highest resolution publicly available and revisits each field every 3 to 5 days.  This API accepts field boundary polygons and returns processed, cropped, and color-corrected RGB and NDVI images every time there is a new image available. We also provide information like percent cloud coverage of the field and the Sentinel tile source for each image. We generate a total of 17 images for each intersected field: A GeoTiff for each band from Sentinel and processed RGB and NDVI images. The following table shows all the images with its resolutions and types: Name\tResolution\tTypeB01.tif\t60 meters\ttif B02.tif\t10\ttif B03.tif\t10\ttif B04.tif\t10\ttif B05.tif\t20\ttif B06.tif\t20\ttif B07.tif\t20\ttif B08.tif\t10\ttif B09.tif\t60\ttif B10.tif\t60\ttif B11.tif\t20\ttif B12.tif\t20\ttif NDVI.png\tNULL\tpng NDVI.tif\t10\tndvi NDVI_color.tif\t10\ttif_colorized RGB.png\tNULL\tpng RGB.tif\t10\ttif_colorized PNG files do not have resolution because they are scaled up by 800%. We generate a colorized NDVI_color.tif using a custom built color ramp. See the image below. If you prefer to use your own ramp, we recommend using NDVI.tif, which is a pre calculated NDVI file. You can import it into any GIS software, like QGis, and use it as you please.  Currently, our Satellite service runs without a relationship between our Field Services and the User Management Services. However, we are working to integrate it into the leafUser hierarchy and the Fields Service. See the Satellite API Reference for more information. "},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/satellite_endpoints","content":"","keywords":""},{"title":"Endpoints","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#endpoints","content":""},{"title":"GET /fields","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#get-fields","content":"Returns paged results for all fields registered. It returns a list of JSON objects like so: Copy [ { \"externalId\":\"your field id\", \"geometry\":{ \"type\":\"MultiPolygon\", \"coordinates\":[...] } }, # etc... ] externalId: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN'\\ 'https://api.withleaf.io/services/satellite/api/fields'  "},{"title":"GET /fields/{id}","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#get-fieldsid","content":"Fetches a field entry based on its external id. It returns a single JSON object with the following entries (like each item fromGET /fields results): Copy { \"externalId\":\"your field id\", \"geometry\":{ \"type\":\"MultiPolygon\", \"coordinates\":[...] } } id: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN'\\ 'https://api.withleaf.io/services/satellite/api/fields/YOUR_ID'  "},{"title":"GET /fields/{id}/processes","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#get-fieldsidprocesses","content":"Returns all processes already handled by our service. A process is created by our servers whenever there is a new satellite image that intersects with one of your registered fields. This endpoint is used to access all images that each process generates. The returned payload is like so: Copy [ { \"date\":\"2020-06-03T19:03:57.882Z\", \"clouds\":0, \"bucketName\":\"sentinel-s2-l1c\", \"bucketKey\":\"tiles/10/S/FH/2020/6/3/0\", \"bucketRegion\":\"eu-central-1\", \"status\":\"SUCCESS\", \"coverage\":100, \"images\":[ { \"url\":\"url.to.your.image.tif\", \"type\":\"tif\", \"resolution\":20 }, # etc... ] }, # etc... ] date: the date of the satellite imageclouds: cloud coverage percentage of the field, from 0 to 100bucketName: name of Sentinel's bucket where the original tile is. Usuallysentinel-s2-l1cbucketRegion: AWS region of original image's bucket. Usually eu-central-1bucketKey: base path of original satellite imagestatus: status of the process. It will be either SUCCESS or FAILUREcoverage: data coverage percentage of the field, from 0 to 100images: each image in this list will have the following data: url: URL of the imagetype: the type of the image. One of tif, ndvi, png andtif_colorizedresolution: resolution, in meters, of the image. See table below cURLPythonJavaScript Copy curl -X GET \\ --header 'Authorization: Bearer YOUR_TOKEN'\\ 'https://api.withleaf.io/services/satellite/api/fields/YOUR_ID/processes'  "},{"title":"POST /fields","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#post-fields","content":"Creates a new field entry in the database. A field will start to be monitored as soon as it is added to our database. It will be continuously monitored for as long as it is in there. If you want to stop this process, you should remove the field from the database entirely. Use a DELETE HTTP request. caution Note that the field deletion cascades to all other tables. Meaning that all processed images will be lost. Payload# The payload of this object should be like the following: Copy { \"externalId\":\"your field id\", \"geometry\":{ \"type\":\"MultiPolygon\", \"coordinates\":[...] } } externalId: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field There are some limitations regarding the geometry of the field. It cannot be bigger than 50 million square meters and it cannot have a perimeter bigger than ~28 thousand meters. cURLPythonJavaScript Copy curl -X POST \\ -H 'Content-Type: application/json'\\ -H 'Authorization: Bearer YOUR_TOKEN'\\ -d '{ your payload }'\\ 'https://api.withleaf.io/services/satellite/api/fields'  "},{"title":"PUT /fields/{id}","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#put-fieldsid","content":"Endpoint used to update the geometry of the field. You cannot update the external id. The payload is a single JSON object with an entry geometry which contains a MultiPolygon GeoJSON object. Again, the new geometry must respect the area and perimeter limits of POST /fields. cURLPythonJavaScript Copy curl -X POST \\ -H 'Content-Type: application/json'\\ -H 'Authorization: Bearer YOUR_TOKEN'\\ -d '{ your geometry }'\\ 'https://api.withleaf.io/services/satellite/api/fields'  "},{"title":"DELETE /fields/{id}","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#delete-fieldsid","content":"Deletes the field from our database. caution Be careful when using this method. It will delete all the processed images from the database as well. cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN'\\ 'https://api.withleaf.io/services/satellite/api/fields/YOUR_ID' "},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/user_management_overview","content":"","keywords":""},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/user_management_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/usermanagement/api See below the REST resources and their endpoints available in this service. Leaf Users Resources# Form of a Leaf User resource: Copy { \"id\":\"UUID\", \"name\":\"str\", \"email\":\"help@withleaf.io\", \"phone\":\"str\", \"address\":\"str\", \"somarCredentials\":{\"Object\"}, \"trimbleCredentials\":{\"Object\"}, \"cnhiCredentials\":{\"Object\"}, \"johnDeereCredentials\":{\"Object\"}, \"ravenCredentials\":{\"Object\"}, \"climatempoCredentials\":{\"Object\"}, \"climateFieldViewCredentials\":{\"Object\"} } Endpoints: Copy GET /users/{id} GET /users/ POST /users PUT /users DELETE /users/{id} John Deere Credentials# Form of a John Deere Credentials resource: Copy { \"id\":\"UUID\", \"clientKey\":\"str\", \"clientSecret\":\"str\", \"tokenId\":\"str\", \"tokenSecretKey\":\"str\" } Endpoints: Copy GET /john-deere-credentials/{id} GET /john-deere-credentials POST /john-deere-credentials DELETE /john-deere-credentials/{id} Climate FieldView Credentials# Form of a Climate FieldView Credentials resource: Copy { \"id\":\"UUID\", \"clientId\":\"str\", \"clientSecret\":\"str\", \"apiKey\":\"str\", \"refreshToken\":\"str\" } Endpoints: Copy GET /climate-field-view-credentials/{id} GET /climate-field-view-credentials POST /climate-field-view-credentials DELETE /climate-field-view-credentials/{id} Trimble Credentials# Form of a Trimble Credentials resource: Copy { \"id\":\"UUID\", \"userName\":\"str\", \"password\":\"str\", \"applicationName\":\"str\", \"serviceIdentityId\":\"str\" } Endpoints: Copy GET /trimble-credentials/{id} GET /trimble-credentials POST /trimble-credentials DELETE /trimble-credentials/{id} CNHI Credentials# Form of a CNHI Credentials resource: Copy { \"id\":\"UUID\", \"clientId\":\"\", \"clientSecret\":\"\", \"refreshToken\":\"\" } Endpoints: Copy GET /cnhi-credentials/{id} GET /cnhi-credentials POST /cnhi-credentials DELETE /cnhi-credentials/{id}  "},{"title":"Endpoints","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#endpoints","content":""},{"title":"GET /users/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get-usersid","content":"Get a Leaf User by its id. Response# A Leaf User as a JSON object. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{id}' "},{"title":"GET /users","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get-users","content":"Get all Leaf Users. Response# A JSON array containing Leaf Users. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users' "},{"title":"POST /users","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#post-users","content":"Creates a Leaf User. Request body# Copy { \"name\":\"str\", \"email\":\"help@withleaf.io\", \"phone\":\"str\", \"address\":\"str\", } Besides the four properties of the example above, if you already have created credentials for some provider like John Deere, you can add an entry like the following, specifying the id of the credentials object previously created, so it will be bind to the Leaf User being created. Copy \"johnDeereCredentials\":{ \"id\":\"UUID\" } Response# A Leaf User with the id assigned to it and it's credentials. Copy { \"id\":\"UUID\", \"name\":\"str\", \"email\":\"help@withleaf.io\", \"phone\":\"str\", \"address\":\"str\", } cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' 'https://api.withleaf.io/services/usermanagement/api/users' "},{"title":"PUT /users","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#put-users","content":"Edits an existing Leaf User by submitting a new one. Request body# Copy { \"leafUserId\":\"UUID\", \"name\":\"str\", \"email\":\"help@withleaf.io\", \"phone\":\"str\", \"address\":\"str\", } Note that if the existing resource has credentials and you don't include them in the body, the new Leaf User will have no credentials. Said that, for keeping the credentials or updating them, include in the JSON above an entry like this: Copy \"johnDeereCredentials\":{ \"id\":\"UUID\" } Response# A Leaf User with the id assigned to it and it's credentials. Copy { \"id\":\"UUID\", \"name\":\"str\", \"email\":\"help@withleaf.io\", \"phone\":\"str\", \"address\":\"str\", } cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' 'https://api.withleaf.io/services/usermanagement/api/users' "},{"title":"DELETE /users/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#delete-usersid","content":"Deletes an existing Leaf User by id. cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' 'https://api.withleaf.io/services/usermanagement/api/users/{id}' "},{"title":"GET /john-deere-credentials/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get--john-deere-credentialsid","content":"Get the John Deere credentials of the user based own his id and returns a JSON with the credentials. Response# Copy { \"id\":\"UUID\", \"clientKey\":\"str\", \"clientSecret\":\"str\", \"tokenId\":\"str\", \"tokenSecretKey\":\"str\" } cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/john-deere-credentials/{id}' "},{"title":"GET /john-deere-credentials","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get--john-deere-credentials","content":"Gets all John Deere Credentials. Response# Copy [ { \"id\":\"UUID\", \"clientKey\":\"str\", \"clientSecret\":\"str\", \"tokenId\":\"str\", \"tokenSecretKey\":\"str\" } ] cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/john-deere-credentials' "},{"title":"POST /john-deere-credentials","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#post-john-deere-credentials","content":"Create a John Deere credential for the Leaf User. Request body# Copy { \"clientKey\":\"str\", \"clientSecret\":\"str\", \"tokenId\":\"str\", \"tokenSecretKey\":\"str\" } Response# A John Deere Credentials object with the id assigned to it. Copy { \"id\":\"UUID\", \"clientKey\":\"str\", \"clientSecret\":\"str\", \"tokenId\":\"str\", \"tokenSecretKey\":\"str\" } cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' 'https://{{url}}/services/usermanagement/api/john-deere-credentials' "},{"title":"DELETE john-deere-credentials/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#delete--john-deere-credentialsid","content":"Delete a John Deere credentials by id. cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/john-deere-credentials/{id}' "},{"title":"GET climate-field-credentials/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get-climate-field-credentialsid","content":"Get a Climate Field View Credentials object by its id. Response# Copy { \"id\":\"UUID\", \"clientId\":\"\", \"clientSecret\":\"\", \"apiKey\":\"\", \"refreshToken\":\"\" } cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/climate-field-view-credentials/{id}' "},{"title":"GET /climate-field-credentials","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get-climate-field-credentials","content":"Gets all the Climate Field View credentials. Response# Copy [ { \"id\":\"UUID\", \"clientId\":\"\", \"clientSecret\":\"\", \"apiKey\":\"\", \"refreshToken\":\"\" } ] cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/climate-field-view-credentials' "},{"title":"DELETE /climate-field-view-credentials/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#delete-climate-field-view-credentialsid","content":"Deletes a \"Climate Field View Credentials\" by id. cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/climate-field-view-credentials/{id}' "},{"title":"POST climate-field-credentials/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#post-climate-field-credentialsid","content":"Create a Climate Field View credential for the Leaf User. Request body# Copy { \"clientKey\":\"str\", \"clientSecret\":\"str\", \"tokenId\":\"str\", \"tokenSecretKey\":\"str\" } Response# A Leaf User with the id assigned to it. Copy { \"id\":\"UUID\", \"clientKey\":\"str\", \"clientSecret\":\"str\", \"tokenId\":\"str\", \"tokenSecretKey\":\"str\" } cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' 'https://{{url}}/services/usermanagement/api/climate-field-view-credentials' "},{"title":"GET /trimble-credentials/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get-trimble-credentialsid","content":"Get a \"Trimble Credentials\" resource by its id. Response# A \"Trimble Credentials\" resource as a JSON. JavaScriptPythonBash Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://a.agrigate.io/services/usermanagement/api/trimble-credentials/{id}' "},{"title":"GET /trimble-credentials","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get--trimble-credentials","content":"Gets all Trimble Credentials. Response# A JSON array with Trimble Credentials. JavaScriptPythonBash Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://a.agrigate.io/services/usermanagement/api/trimble-credentials' "},{"title":"POST /trimble-credentials","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#post-trimble-credentials","content":"Create a \"Trimble Credentials\" for the Leaf User. Request body# A \"Trimble Credentials\" without id. Copy { \"userName\":\"str\", \"password\":\"str\", \"applicationName\":\"str\", \"serviceIdentityId\":\"str\" } Response# A \"Trimble Credentials\" with the id assigned to it. JavaScriptPythonBash Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' 'https://{{url}}/services/usermanagement/api/trimble-credentials' "},{"title":"DELETE trimble-credentials/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#delete-trimble-credentialsid","content":"Delete a Trimble Credentials resource by id. JavaScriptPythonBash Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://a.agrigate.io/services/usermanagement/api/trimble-credentials/{id}' "},{"title":"GET /cnhi-credentials/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get-cnhi-credentialsid","content":"Get a \"CNHI Credentials\" resource by its id. Response# A \"CNHI Credentials\" resource as a JSON. JavaScriptPythonBash Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://a.agrigate.io/services/usermanagement/api/cnhi-credentials/{id}' "},{"title":"GET /cnhi-credentials","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get-cnhi-credentials","content":"Gets all CNHI Credentials. Response# A JSON array with CNHI Credentials. JavaScriptPythonBash Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://a.agrigate.io/services/usermanagement/api/cnhi-credentials' "},{"title":"POST /cnhi-credentials","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#post-cnhi-credentials","content":"Create a \"CNHI Credentials\" for the Leaf User. Request body# A \"CNHI Credentials\" without id. Copy { \"clientId\":\"\", \"clientSecret\":\"\", \"refreshToken\":\"\" } Response# A \"CNHI Credentials\" with the id assigned to it. JavaScriptPythonBash Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' 'https://{{url}}/services/usermanagement/api/cnhi-credentials' "},{"title":"DELETE cnhi-credentials/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#delete-cnhi-credentialsid","content":"Delete a CNHI Credentials resource by id. JavaScriptPythonBash Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://a.agrigate.io/services/usermanagement/api/cnhi-credentials/{id}' :::tip Please don't hesitate to [contact][contact] us to schedule a demo, ask a question, request sample data, or suggest a feature! ::: "}]
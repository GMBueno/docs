[{"title":"Hello","type":0,"sectionRef":"#","url":"blog/hello-world","content":"Welcome to this blog. This blog is created with Docusaurus 2 alpha. This is a test post. A whole bunch of other information.","keywords":""},{"title":"Hola","type":0,"sectionRef":"#","url":"blog/hola","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":""},{"title":"Welcome","type":0,"sectionRef":"#","url":"blog/welcome","content":"Blog features are powered by the blog plugin. Simply add files to the blog directory. It supports tags as well! Delete the whole directory if you don't want the blog features. As simple as that!","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/","content":"Welcome to Leaf's Documentation! Food and Agriculture developers use Leaf's API to access clean, standardized, and aggregated Farm data from all major sources. Use theGetting Started section to help you start accessing sample farm data quickly, easily, and securely. We have implementation examples in cURL, Python and NodeJS! tip Please don't hesitate to contact us to schedule a demo, ask a question, request sample data, or suggest a feature!","keywords":""},{"title":"Authentication","type":0,"sectionRef":"#","url":"docs/authentication","content":"To access our API, you just have to register using this link. After confirming your email, you will be able to request a token (JWT) through this endpoint: Copy https://a.agrigate.io/api/authenticate You will receive your Leaf Token as response. All set! Include this token in your API calls and you will have access to Leaf's API. Your Leaf Token lasts for 24h by default. Include \"rememberMe\": \"true\" in the json to make it last 30 days. After expiration, just make the same request to the same endpoint and you will get a new access token. JavaScriptPythonBash Copy const axios =require('axios') const endpoint ='https://a.agrigate.io/api/authenticate' const data ={ username:'username', password:'password'} axios.post(endpoint,{ data }) .then(res=>console.log(res.data)) .catch(console.error) This request will return your access token to Leaf's API: Copy { \"id_token\":\"YOUR_LEAF_TOKEN\" }","keywords":""},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/converters_endpoints","content":"","keywords":""},{"title":"File Conversion","type":1,"pageTitle":"Endpoints","url":"docs/converters_endpoints#file-conversion","content":"If you want to allow users to upload machine files directly to your dashboard or to convert recommendations to a machine-readable format or have another use that requires file conversion, these converters will help. Roadmap Today, you have the option to use these converters: Shapefile -> ISOXMLCNHI .cn1 -> GeoJSONTrimble -> GeoJSONShapefile -> GeoJSONGeoJSON -> Shapefile "},{"title":"Shapefile -> ISOXML","type":1,"pageTitle":"Endpoints","url":"docs/converters_endpoints#shapefile---isoxml","content":"Send this along with your zipped shapefile PythonBashJavaScript Returns status 200 and a TEXT link where you can download your converted file from Copy { \"uri\":\"https://leaf-isoxml.s3-us-west-2.amazonaws.com/output/3e1291e4-3026-4357-8bff-0e24feb79602.xml\" } This endpoint will convert a shapefile to ISOXML to be read by a wide variety of machines. This is commonly used for converting VRT prescription files to a machine readable format. Note that the return is plain text, not json.  "},{"title":"CNHI -> GeoJSON","type":1,"pageTitle":"Endpoints","url":"docs/converters_endpoints#cnhi---geojson","content":"Send this along with your zipped file PythonBashJavaScript Copy curl\\ -F 'file=@PATH/YOUR_FILE_NAME.cn1.zip'\\ -H 'Authorization: Bearer YOUR_TOKEN'\\ 'https://a.agrigate.io/quickstart/api/files/cnhi' Returns status 200 and a link where you can download your converted file from Copy { \"uri\":\"https://cnhi-adapt-dev.s3-us-west-2.amazonaws.com/output/3190d2c5-1948-4621-92c5-6bb5c5d36ad1.json.gz\" } This endpoint will convert a CNHi .CN1 file to Leaf's geojson data model. To use, simply upload a zipped .CN1 folder.  "},{"title":"Trimble -> GeoJSON","type":1,"pageTitle":"Endpoints","url":"docs/converters_endpoints#trimble---geojson","content":"We expect Trimble data to be a zipped folder containing AgData, that is files with formats like: .agf (fields), .agi (implements), .agm (materials), .agt (tasks) and .agv (vehicles). Send this along with your zipped file PythonBashJavaScript Copy curl\\ -F 'file=@PATH/YOUR_FILE_NAME.zip'\\ -H 'Authorization: Bearer YOUR_TOKEN'\\ 'https://a.agrigate.io/quickstart/api/files/trimble' Returns status 200 and a link where you can download your converted file from Copy { \"uri\":\"https://trimble-adapt-dev.s3-us-west-2.amazonaws.com/output/7fc72a96-86f6-4568-b730-a581f883509a.json.gz\" } This endpoint will convert a Trimble file to Leaf's geojson data model. To use, simply upload a zipped Trimble folder.  "},{"title":"Shapefile -> GeoJSON","type":1,"pageTitle":"Endpoints","url":"docs/converters_endpoints#shapefile---geojson","content":"Send this along with your zipped file PythonBashJavaScript Copy curl\\ -F 'file=@PATH/YOUR_FILE_NAME.zip'\\ -H 'Authorization: Bearer YOUR_TOKEN'\\ 'https://a.agrigate.io/quickstart/api/converters/shapefile/geojson' Returns status 200 and a TEXT link where you can download your converted (json) file from Copy { \"uri\": \"https://converter-prod-conversionsbucket-somerandomstring.s3-us-west-2.amazonaws.com/somerandomstring.json\" } The input file must be a zip file. That is done because shapefile is a multi file standard. It is usually a set of 4 files: .dbf, .prj, .shp and .shx. The output file will be a GeoJSON file.  "},{"title":"GeoJSON -> Shapefile","type":1,"pageTitle":"Endpoints","url":"docs/converters_endpoints#geojson---shapefile","content":"Send this along with your (Geo)JSON PythonBashJavaScript Copy curl\\ -F 'file=@PATH/YOUR_FILE_NAME.json'\\ -H 'Authorization: Bearer YOUR_TOKEN'\\ 'https://a.agrigate.io/quickstart/api/converters/geojson/shapefile/' Returns status 200 and a TEXT link where you can download your converted file from Copy { \"uri\": \"https://converter-prod-conversionsbucket-somerandomstring.s3-us-west-2.amazonaws.com/somerandomstring.zip\" } The input file must be a .json GeoJSON file The output file will be a zipped file.  "},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/converters_overview","content":"","keywords":""},{"title":"Available Converters","type":1,"pageTitle":"Overview","url":"docs/converters_overview#available-converters","content":"We currently have the following conversions available: From\tTogeojson\tshapefile, iso11783, png shapefile\tgeojson trimble\tgeojson cn1\tgeojson datclimate\tgeojson adaptadm\tgeojson "},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/field_boundaries_overview","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Overview","url":"docs/field_boundaries_overview#overview","content":"Leaf's Field Boundaries API help you to operate with Field related data from all major machine brands. With this API you can synchronize fields stored on our back-end with existing fields in many platforms like John Deere and Climate FieldView. Besides, we provide easy endpoints to deal with the geometries of field boundaries. We provide a quickstart Postman collectionso you can get started. To make calls to Leaf's API, you will need a Leaf account. If you don't have one yet, please create your Leaf account and get your token. You can integrate with many different companies, and you only have to do it once for each user. To connect, you just choose the company you wish to connect to and follow these 3 steps: Get the authentication URL of company you want to connect toGet yours and your user's tokensAdd credentials to Leaf Now you can opt to connect to more companies or Create a Leaf User and attach these credentials, so that Leaf can represent your user internally and you can query specifically for them and their data. All set! Leaf automatically detects existing fields in brand's platforms. Also, this API is well integrated with Leaf's Operations Data API. Operations performed in the fields will automatically be bind to the fields you create with this API It is important to know some concepts before using this API. It deals with data from Season, Grower, Farm, Field and File (operations). Fields is the central concept in this API. Every Field has boundaries which is the geometry that defines its borders.Most Fields are part of a Farm and every Farm can have one or more Fields.Farms can be grouped together into Growers.A Season makes a relation among a Field, a Crop and a start and end dates.Files or Operations are the results of operations in a given Field. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/getting_started","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Getting Started","url":"docs/getting_started#overview","content":"Welcome to Leaf's Documentation! Food and Agriculture developers use Leaf's API to access clean, standardized, and aggregated Farm data from all major sources. Use the getting started section below to help you access sample farm data quickly, easily, and securely. We have implementation examples in cURL, NodeJS and Python! Getting Started Leaf's API abstracts and standardizes across agricultural data sources to make things easy for you. There are just a few concepts that you need to get started and we provide sample data within new Leaf accounts to help you learn quickly. tip Below you'll find instructions using curl and python, but you may also follow along using our Leaf Postman collectionif you're familiar. "},{"title":"Authentication","type":1,"pageTitle":"Getting Started","url":"docs/getting_started#authentication","content":"After creating and confirming your account, the first step is to authenticate with your email and password to retrieve an API token. This token is what we'll use in subsequent steps to talk to the API. Be sure to keep a copy of this token for the remaining steps. cURLPython Copy curl -X POST \\ -H 'Content-Type: application/json'\\ -d '{ \"username\":\"username\", \"password\":\"password\", \"rememberMe\":\"true\" }'\\ 'https://a.agrigate.io/api/authenticate' "},{"title":"Get sample Field","type":1,"pageTitle":"Getting Started","url":"docs/getting_started#get-sample-field","content":"Inside your account, we've created a sample LeafUser and populated it with data. Let's take a look at the fields endpoint to see the sample field: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN'\\ 'https://a.agrigate.io/services/satellite/api/fields' "},{"title":"Get all sample operation files","type":1,"pageTitle":"Getting Started","url":"docs/getting_started#get-all-sample-operation-files","content":"Next, let's look at operations data. 'Operations' refers to the data collected when a machine and any implements performed an operation on a farm. This command will list operations files available across your whole account: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN'\\ 'https://a.agrigate.io/services/operations/api/files' "},{"title":"Get specific sample operation file","type":1,"pageTitle":"Getting Started","url":"docs/getting_started#get-specific-sample-operation-file","content":"Now that you have a file ID, you can query for the operations data itself and a summary as well. cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN'\\ 'https://a.agrigate.io/services/operations/api/files/{id}' "},{"title":"Get sample operation file summary","type":1,"pageTitle":"Getting Started","url":"docs/getting_started#get-sample-operation-file-summary","content":"cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN'\\ 'https://a.agrigate.io/services/operations/api/files/{id}/summary' "},{"title":"Get sample operation file image","type":1,"pageTitle":"Getting Started","url":"docs/getting_started#get-sample-operation-file-image","content":"You may have already noticed that we're seeing a lot of operations files for this one field and the timestamps span just a few days. This is because we're looking at multiple files output from a machine that effectively represent one large operation - a harvest. Before we talk about merging these pieces into a single operation, let's look at an image from one of the pieces: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN'\\ 'https://a.agrigate.io/services/operations/api/files/{id}/images' "},{"title":"Get sample merged operation file","type":1,"pageTitle":"Getting Started","url":"docs/getting_started#get-sample-merged-operation-file","content":"A single strip appears in that image which is no mistake. It's also not as useful as seeing the whole operation across the whole field! To solve this, we allow you to request a merge of operations data and produce images for data of the same type and timeframe. The sample data already includes a merged file. Let's take a look at that merged harvesting image which is colored to indicate the range of wet mass collected. First, let's find the merged file by simply adding a parameter to filter to origin=merged cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN'\\ 'https://a.agrigate.io/services/operations/api/files?origin=merged' And finally, use that file ID to retrieve a list of images, one for each operation property. From this response, you can load one of the sample images: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN'\\ 'https://a.agrigate.io/services/operations/api/files/{id}/images' "},{"title":"Get sample satellite imagery","type":1,"pageTitle":"Getting Started","url":"docs/getting_started#get-sample-satellite-imagery","content":"Finally, let's take a look at some satellite imagery. Using data from Sentinel-2, we produce NDVI images for fields you define to be monitored. We can pull up the sample NDVI image like this: Copy <Tabs defaultValue=\"sh\" values={[ { label: 'cURL', value: 'sh', }, { label: 'Python', value: 'py', }, ] }> <TabItem value=\"sh\"> ```shell curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://a.agrigate.io/services/satellite/api/fields/{field_id}' ``` </TabItem> <TabItem value=\"py\"> ```py import requests url = \"https://a.agrigate.io/services/satellite/api/fields/demo_field/processes\" headers = { 'Content-Type': 'application/json', 'Authorization': 'Bearer YOUR_LEAF_TOKEN' } response = requests.request(\"GET\", url, headers=headers) ``` </TabItem> </Tabs> "},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/operations_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/operations/api This service has the following endpoints available: Copy GET /files GET /files/{id} GET /files/{id}/summary GET /files/{id}/images POST /files POST /files/merge DELETE /files/{id} "},{"title":"Endpoints","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#endpoints","content":"Here we list all the available endpoints from this microservice. For easily testing it, we recommend to see our Postman collection. requires Leaf User with credentials To have access to operation files, you will need a Leaf User with valid credentials from the provider you want to access data. If you don't have a Leaf User or you have not connected it with any provider yet, see how to create a Leaf Useror how to add credentials to a Leaf User. "},{"title":"GET /files","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#get-files","content":"Gets a paged list of files that belong to the current logged in user. It is possible to filter the results by passing some query parameters. They are listed below. leafUserId, only matches files from this userprovider, filter by the provider. Currently, we support the following providers: CNHI, JohnDeere, Trimble and ClimateFieldViewstatus, you can match the step of the process by passing one of the following: processed, failed or processingorigin, files have different origins in our services. You can filter by its origin using one of the following: provider, automerged, merged,uploadedorganizationId, as the provider organizationId (only available for JohnDeere files)createdTime, as ISO 8601 date to filter by the file's creation timeoperationStartTime, as ISO 8601 date to filter by the operation's start timeoperationEndTime, as ISO 8601 date to filter by the operation's end time You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetchedsize, an integer specifying the size of the page cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN'\\ 'https://a.agrigate.io/services/operations/api/files' It returns a JSON object like the following: Copy [ { \"id\":\"UUID\", \"fileName\":\"string\", \"provider\":\"string\", \"organizationId\":\"string\", \"fileType\":\"string\", \"fileFormat\":\"string\", \"sizeInBytes\":0, \"originalFile\":\"string\", \"rawGeojson\":\"string\", \"standardGeojson\":\"string\", \"zippedPNGs\":\"string\", \"leafUserId\":\"UUID\", \"apiOwnerUsername\":\"string\", \"summary\":\"Feature\", \"sourceFiles\":[], \"status\":\"string\", \"origin\":\"string\", \"createdTime\":\"2020-04-29T20:13:42.811Z\", \"operationEndTime\":\"2020-04-29T20:13:42.811Z\", \"operationStartTime\":\"2020-04-29T23:13:42.811Z\" }, ... ] The sourceFiles entry is a list of file's ids that were used to create the file. It will appear only in merge and automerged files. "},{"title":"GET /files/{id}","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#get-filesid","content":"Gets a single file by its id. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://a.agrigate.io/services/operations/api/files/{id}' Returns a single JSON object: Copy { \"id\":\"UUID\", \"fileName\":\"string\", \"provider\":\"string\", \"organizationId\":\"string\", \"fileType\":\"string\", \"fileFormat\":\"string\", \"sizeInBytes\":0, \"originalFile\":\"string\", \"rawGeojson\":\"string\", \"standardGeojson\":\"string\", \"zippedPNGs\":\"string\", \"leafUserId\":\"UUID\", \"apiOwnerUsername\":\"string\", \"summary\":\"Feature\", \"sourceFiles\":[], \"status\":\"string\", \"origin\":\"string\", \"createdTime\":\"2020-04-29T20:13:42.811Z\", \"operationEndTime\":\"2020-04-29T20:13:42.811Z\", \"operationStartTime\":\"2020-04-29T23:13:42.811Z\" } "},{"title":"GET /files/{id}/summary","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#get-filesidsummary","content":"Gets the summary, if available, for the file id. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://a.agrigate.io/services/operations/api/files/{id}/summary' Returns a single GeoJSON feature containing the convex hull of all operation data and some statistics calculated from it. Copy { \"type\":\"Feature\", \"properties\":{ # these properties and more \"totalDistance\":19194.943013290438, \"operationType\":\"harvested\", \"totalArea\":131638.75702051684 }, \"geometry\":{ \"type\":\"MultiPolygon\", \"coordinates\":[...] } } "},{"title":"GET /files/{id}/images","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#get-filesidimages","content":"Gets a list of PNG images generated from the operation's file properties. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://a.agrigate.io/services/operations/api/files/{id}/images' Returns a JSON list of the following format: Copy [ { \"property\":\"elevation\", \"ramp\":{ \"0%\":[200,0,0], \"35%\":[255,40,0], \"45%\":[255,150,0], \"55%\":[255,240,0], \"65%\":[0,230,0], \"75%\":[0,190,0], \"100%\":[0,130,0], \"nv\":[0,0,0,0] }, \"url\":\"string\" }, ... ] The property refers to the property extracted from files' data to generate the image. In the example above, the image would represent the elevation. The ramp is the color ramp used to generate the image. The percentages correspond to the minimum (0%) and maximum (100%) values in the image. The listed values correspond to RGB values used. The nv refers to no value. It is used internally to make the image transparent on places without data. Currently, this ramp is the same in all images processed. We also generate an auxiliary xml with geographic information to handle this image on GIS environments. You just need to append the \".aux.xml\" string to the png url. "},{"title":"POST /files","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#post-files","content":"Posts/creates a new file in our server. This endpoint receives three required query parameters. A leafUserId, fileFormat andprovider. The fileFormat must be one of the following: Copy ADAPTADM CN1 DATCLIMATE GEOJSON ISO11783 SHAPEFILE TRIMBLE The provider must be one of the following: Copy Leaf ClimateFieldView CNHI JohnDeere Trimble cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -F 'file=shapefile.zip' \\ 'https://a.agrigate.io/services/operations/api/files?' \\ 'fileFormat=SHAPEFILE&provider=JohnDeere&leafUserId=id' Returns a single JSON object: Copy { \"message\":\"Your file is being processed and will be available in a few minutes\", \"id\":\"id\" } After a few minutes, you can consult the result of Leaf processing over this file by performing GET consults in this. "},{"title":"POST /files/merge","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#post-filesmerge","content":"Posts a merge operation to our server. A merge operation is performed asynchronously. This call will return immediately with the newly created file entry, but at this point, the file is not already processed and available. You will need to make a new GET /files request for the new id and check the status. A status value of processed means the file is done merging. A merge process has some validations, the files passed must belong to the same leafUserId, be of the same operation type and have the status as processed. If any of those filters fail, the endpoint will result in HTTP 400 error. It receives a single JSON object with the ids entry. Example: Copy { \"ids\":[\"id1\",\"id2\",\"so on\"] } cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"ids\": [ \"id1\", \"id2\" ] }' 'https://a.agrigate.io/services/operations/api/files/merge' Returns a single JSON object: Copy { \"id\":\"id\", \"status\":\"SENT_TO_MERGE\" } After a few minutes, you can consult the result of Leaf processing over this file by performing GET consults in this. "},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/field_boundaries_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://a.agrigate.io/services/fields/api See below the REST resources and their endpoints available in this service. Field Resource# Form of a Field: Copy { \"id\":\"UUID\", \"providerName\":\"JohnDeere\", \"providerFieldId\":\"UUID\", \"providerBoundaryId\":\"UUID\", \"type\":\"ORIGINAL\", \"leafUserId\":\"UUID\", \"organizationId\":\"str\", \"mergedFieldId\":[\"UUID\"], \"files\":[\"UUID\"] \"geometry\":{ \"type\":\"MultiPolygon\", \"coordinates\":[ [ [ [-93.48821327980518,41.77137549568163], [-93.48817333680519,41.77143534378164], [-93.48821327390516,41.76068857977987], [-93.48821327980518,41.77137549568163] ] ] ] }, } Copy GET /fields GET /fields/after GET /fields/before GET /fields/between GET /users/{leafUserId}/fields/{id} POST /users/{leafUserId}/fields/intersects POST /users/{leafUserId}/fields/disjoint POST /users/{leafUserId}/fields/integration POST /users/{leafUserId}/fields/intersect POST /users/{leafUserId}/fields/same POST /users/{leafUserId}/fields/{id}/integration DELETE /users/{leafUserId}/fields/{id} Operation Resource# Form of a Operation/File: Copy { \"id\":\"UUID\", \"operationType\":\"planted\", \"startTime\":\"ISO date-time\", \"endTime\":\"ISO date-time\", \"crops\":[\"str\"], \"varieties\":[\"str\"], \"providerFileId\":\"str\", \"provider\":\"Trimble\", \"leafUserId\":\"UUID\" } Copy GET /users/{leafUserId}/fields/{fieldId}/operations GET /users/{leafUserId}/fields/{fieldId}/operations/{id} "},{"title":"Endpoints","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#endpoints","content":"Here we list all the available endpoints from this microservice. For easily testing it, we recommend to see our Postman collection. "},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/operations_overview","content":"","keywords":""},{"title":"Roadmap","type":1,"pageTitle":"Overview","url":"docs/operations_overview#roadmap","content":"Today, you can connect to these companies: John DeereClimate FieldViewCNHiTrimble Coming in the third quarter of 2020: RavenAGCO Coming in the fourth quarter of 2020: AgLeaderStara We also provide our Leaf Postman collection so you can follow along easily. "},{"title":"GET /fields","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-fields","content":"Gets a paged list of Fields. It is possible to filter the results by passing some query parameters. They are listed below. leafUserId, only matches files from this user (string).operationtype, one of the following values: harvested, planted,applied, other (string).operationProvider, filter by the provider. Currently we support the following providers: CNHI, JohnDeere, Trimble and ClimateFieldView(string).operationCrop, provider's identifier crop id. Requires operationProvider(string).operationVariety provider's identifier variety name/code. RequiresoperationProvider.operationStartTime, as ISO 8601 date to filter by the operation's start time.operationEndTime, as ISO 8601 date to filter by the operation's end time. If some operation parameter is passed, then the response will include the entry\"files\", otherwise such entry won't be present. You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetchedsize, an integer specifying the size of the page Response# A JSON array containing Fields. JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' const endpoint ='https://a.agrigate.io/services/fields/api/fields' const headers ={'Authorization':`Bearer ${TOKEN}`} axios.get(endpoint,{ headers }) .then(res=>console.log(res.data)) .catch(console.error) "},{"title":"GET /fields/{id}","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-fieldsid","content":"Gets a single Field by its id. Response# A single Field as a JSON object. JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' const endpoint ='https://a.agrigate.io/services/fields/api/users/{leafUserId}/fields/{id}' const headers ={'Authorization':`Bearer ${TOKEN}`} axios.get(endpoint,{ headers }) .then(res=>console.log(res.data)) .catch(console.error) "},{"title":"GET /fields/before","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-fieldsbefore","content":"Gets a list of all the Fields created before the instant given in the query parameter instant (ISO date-time format). It must be a time in the past. Response# A JSON list of Fields. JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' const endpoint ='https://a.agrigate.io/services/fields/api/fields/before' const headers ={'Authorization':`Bearer ${TOKEN}`} const param ={instant:'END TIME'} axios.get(endpoint,{headers, param}) .then(res=>console.log(res.data)) .catch(console.error) "},{"title":"GET /fields/after","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-fieldsafter","content":"Gets a list of all the fields created after the instant given in the query parameter instant (ISO date-time format). It must be a time in the past. Response# A JSON list of Fields. JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' const endpoint ='https://a.agrigate.io/services/fields/api/fields/after' const headers ={'Authorization':`Bearer ${TOKEN}`} const param ={instant:'START TIME'} axios.get(endpoint,{headers, param}) .then(res=>console.log(res.data)) .catch(console.error) "},{"title":"GET /fields/between","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-fieldsbetween","content":"Gets a list of all the Fields created between the instants given in the query parameters start and end. Both in ISO date-time format. They respectively must be in the past and in the past or present. Response# A JSON list of Fields. JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' const endpoint ='https://a.agrigate.io/services/fields/api/fields/between' const headers ={'Authorization':`Bearer ${TOKEN}`} const interval ={ start:'START TIME', end:'END TIME', } axios.get(endpoint,{headers, interval}) .then(res=>console.log(res.data)) .catch(console.error) "},{"title":"DELETE /users/{leafUserId}/fields/{id}","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#delete-usersleafuseridfieldsid","content":"Deletes the field with the given id. "},{"title":"POST /users/{leafUserId}/fields","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#post-usersleafuseridfields","content":"Creates a Field for the user leafUserId. A resquest body must be provided containing the an entry \"geometry\", which represents the boundaries of the Field being created as a GeoJSON geometry (it must be a \"MultiPolygon\"). The entry \"id\" is optional. If no id is provided, an UUID will be generated. The Field id CAN NOT be updated. Request body example: Copy { \"geometry\":{ \"type\":\"MultiPolygon\", \"coordinates\":[ [ [ [-93.48821327980518,41.77137549568163], [-93.48817333680519,41.77143534378164], [-93.48821327390516,41.76068857977987], [-93.48821327980518,41.77137549568163] ] ] ] } } Response# A Field as a JSON object. JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' const endpoint ='https://a.agrigate.io/services/fields/api/users/{leafUserId}/fields/{id}' const headers ={'Authorization':`Bearer ${TOKEN}`} const data ={ geometry:{ type:\"MultiPolygon\", coordinates:[...] } } axios.get(endpoint,{ headers, data }) .then(res=>console.log(res.data)) .catch(console.error) "},{"title":"POST /users/{leafUserId}/fields/intersect","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#post-usersleafuseridfieldsintersect","content":"Gets a GeoJSON MultiPolygon corresponding to the intersection of the Fields specified by the given id's. Such Field id's goes in a list, in the request body. Request body example: Copy { \"id\":[\"UUID1\",\"UUID2\"] } Response# A JSON in the format of a GeoJSON geometry. Copy { \"geometry\":{ \"type\":\"MultiPolygon\", \"coordinates\":[ [ [ [-93.48821327980518,41.77137549568163], [-93.48817333680519,41.77143534378164], [-93.48821327390516,41.76068857977987], [-93.48821327980518,41.77137549568163] ] ] ] } } "},{"title":"POST /fields/query/intersects","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#post-fieldsqueryintersects","content":"Gets a list of fields that intersects with the GeoJSON MultiPolygon sent in the request body. Response# A JSON list of Fields. JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' const endpoint ='https://a.agrigate.io/services/fields/api/fields/query/intersects' const headers ={'Authorization':`Bearer ${TOKEN}`} const data ={ geometry:{ type:\"MultiPolygon\", coordinates:[...] } } axios.get(endpoint,{ headers, data }) .then(res=>console.log(res.data)) .catch(console.error) "},{"title":"POST /users/{leafUserId}/fields/same","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#post-usersleafuseridfieldssame","content":"Gets a boolean value answering if the Fields specified by a list of Field id's sent in the request body have the same values for their vertices, in exactly the same order. "},{"title":"POST /users/{leafUserId}/fields/disjoint","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#post-usersleafuseridfieldsdisjoint","content":"Gets a boolean value answering if the fields specified by a list of field id's in the request body are disjoint. "},{"title":"POST /users/{leafUserId}/fields/integration","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#post-usersleafuseridfieldsintegration","content":"Uploads fields to providers. Currently we only support Climate FieldView. However new integrations will be added soon. Request body format: Copy { \"fields\":[\"UUID\"], \"providers\":[\"ClimateFieldView\"] } Response# A JSON in the followin format. Copy { \"UUID\":{ \"ClimateFieldView\":{ \"id\":\"0cb726c8-aff0-415a-9de3-a04b627008dd\" }, }, } "},{"title":"GET /users/{userId}/fields/{fieldId}/operations","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-usersuseridfieldsfieldidoperations","content":"Gets a paged list of all operation files of the Field specified by the URL parameter fieldId. It is possible to filter the results by passing some query parameters. They are listed below. operationtype, one of the following values: harvested, planted,applied, other (string).provider, filter by the provider. Currently we support the following providers: CNHI, JohnDeere, Trimble and ClimateFieldView (string).crop, provider's identifier crop id. Requires operationProvider (string).variety provider's identifier variety name/code. RequiresoperationProvider.startTime, as ISO 8601 date to filter by the operation's start time.endTime, as ISO 8601 date to filter by the operation's end time. You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetchedsize, an integer specifying the size of the page Response# A JSON array of Files. JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' const endpoint ='https://a.agrigate.io/services/fields/api/users/{userId}/fields/{fieldId}/operations' const headers ={'Authorization':`Bearer ${TOKEN}`} axios.get(endpoint,{ headers }) .then(res=>console.log(res.data)) .catch(console.error) [2]: https://tools.ietf.org/html/rfc7946 --> "},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/operations_postman","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Overview","url":"docs/operations_postman#overview","content":"Leaf's Operation Data API returns aggregated, cleaned, and standardized data from all major machine data brands in a simple JSON response. This tutorial will walk through how to create a Leaf user, securely authenticate with their chosen platforms, and receive auto-updating data from all of them with a single request. We also provide a quickstart Postman collection so you can follow along easily. To make calls to Leaf's API, you will need a Leaf account. If you don't have one yet, please create your Leaf account and get your token. You can integrate with many different companies, and you only have to do it once for each user. To connect, you just choose the company you wish to connect to and follow these 3 steps: Get the authentication URL of company you want to connect toGet yours and your user's tokensAdd credentials to Leaf Now you can opt to connect to more companies or Create a Leaf User and attach these credentials, so that Leaf can represent your user internally and you can query specifically for them and their data. All set! Leaf automatically detects and starts processing new files. You can access in \"Get Operation Files\". "},{"title":"Roadmap","type":1,"pageTitle":"Overview","url":"docs/operations_postman#roadmap","content":"Today, you can to connect to these companies: John Deere (Medium)Climate FieldView (Medium)CNHiTrimble Coming in the third quarter of 2020: RavenAGCO Coming in the fourth quarter of 2020: AgLeaderStara "},{"title":"John Deere","type":1,"pageTitle":"Overview","url":"docs/operations_postman#john-deere","content":"This section will show you how you can integrate Leaf's API with you John Deere account and start using our operations service. Grab our quickstartPostman collection and follow along! 1. Get John Deere auth URL# In Step 1 we will be generating tokens from John Deere. The goal In step 2 is we will get our John Deere token_id and token_secret. Token Verifier# In step 1 we will get a temporary \"token verifier\" from John Deere that confirms an user’s authentication of your application to access their John Deere data and generate credentials. We get that verifier by going through their authentication flow (OAuth2). Before generating the authentication URL, please: Update current value of jd_client_key to your app's client key on John DeereUpdate current value of jd_client_secret to your app's client secret on John DeereUpdate current value of jd_callback_url to your app's callback_url on John Deere Then, to generate the authentication URL your application will send to your user so they can authorize access to their account files you can use the included step 2 in the Postman Collection. Change client_key and client_ secretvariables to yours received from John Deere when you created an app on your developer account with them and redirect_uri to a uri the \"token verifier\" will be sent after the user authorizes your application. Hit Send. Redirect your user to the url included in the response. They will authenticate and be redirected to the redirect_url. Copy the entire url you were redirected to. It looks like: Copy https://leafagriculture.com.br/?oauth_token=TOKEN&oauth_verifier=CODE Paste it in the environment variable jd_response_url. 2. Get John Deere Tokens# After updating the jd_response_url in Postman you can submit your credentials and receive your tokens. Hit Send token_id and token_secret_key will be automatically transferred tojd_token_id and jd_token_secret environment variables and will be used in the next step. 3. Add John Deere credentials# Now we can create a Developer-User pair credentials ID that will allow you to access your user’s John Deere data. We first add the John Deere credentials to Leaf API. Hit Send All the info needed has already been filled automatically in Step 2. An id for the credentials you just created will be returned. This id will be automatically transferred to the value of jd_credentials_id to be used in the next step. "},{"title":"Climate Field View","type":1,"pageTitle":"Overview","url":"docs/operations_postman#climate-field-view","content":"Grab our quickstart Postman collection and follow along! 1. Get Climate Field View auth URL# We will be generating a url to redirect your user to authenticate with Climate. Update environment variables cfv_client_id and cfv_client_secret to your Climate Field View developer account credentials. Update environment variable cfv_redirect_url to your application's backend Redirect your user to the script's output url. They will authenticate and be redirected to the redirect_uri. A code will be sent to that cfv_redirect_url. We will need this code Step 2. Copy the code value. note: this code expires after 1 minute. Paste code value to environment variable cfv_code 2. Get Climate Field View tokens# Hit \"Send\" A lot of information will be returned. The important ones are access_tokenand refresh_token. These will be automatically transferred tocfv_access_token and cfv_refresh_token environment variables and will be used in the next step. 3. Add Climate Field View credentials# Now we can create a Developer-User pair credentials ID that will allow you to access your user’s Climate data. We first add the Climate credentials to Leaf API, to do that: Hit \"Send\" An id for the credentials you just created will be returned. This id will be automatically transferred to the value of cfv_credentials_id to be used in the next step. "},{"title":"Leaf User","type":1,"pageTitle":"Overview","url":"docs/operations_postman#leaf-user","content":"Create Leaf User# Now we have to attach credentials to a Leaf User. To do so, we can create a Leaf user and attach our John Deere and/or Climate Field View credentials via the credentials id. We can also attach credentials from other companies to this same user to query all available data by Grower/Farm/Field regardless of brand. Update (optional) fields \"address\", \"email\", \"name\" and \"phone\" with your user's information. We have automatically included our jd_credentials_id to this call and attached it to this user. Hit \"Send\" Along with other information returned, there is an \"id\". This \"id\" is theleaf_user_id that will be used in the next (final) Step to query and access files. Update Leaf User# To update a Leaf User, let's say to add another provider credentials or change the user's address, we can use this PUT request. Since this method overwrites, remember to send all the user's information along with the information you want to add or update. For example, if you want to add John Deere credentials to a user that already has ClimateFieldView credentials, remember to specify both credentials ids. Get specific Leaf User# Get specific Leaf User With this endpoint you can query all information on a specific Leaf User, such as their address, email, credentials, etc. To do so, update the value of the environment variable leaf_user_id to the Leaf User id you want to query. Gel all Leaf Users# Get all Leaf Users With this endpoint you can query all information on all your Leaf Users, such as their address, email, credentials, etc. Just hit 'send'. "},{"title":"Query Operations by Field","type":1,"pageTitle":"Overview","url":"docs/operations_postman#query-operations-by-field","content":"To query all operations that happened in a specific field (step 2), we first need to create that field (step 1). Then, Leaf will automatically detect operations of that field based on the operations' and on the field's coordinates. This process usually takes about 30 minutes. 1. Create Field# Here we need to specify a leafUserId (that will be the Leaf User owner of that field), a externalId (that will be the name we give to the field) and the geojson geometry of the field (location). After creating the field we can query it (step 2) 2. Get operations' ids by Field# To query all operations that happened in a specific field, just update the environment variable field_external_id to the field id you want to query files. "},{"title":"Merge Operation Files","type":1,"pageTitle":"Overview","url":"docs/operations_postman#merge-operation-files","content":"1. Merge files# Merging files with Leaf is a very simple process. You just have to list, in the request json body, the ids of the files you want to merge. Make sure the operations are of the same type (APPLIED or HARVESTED or PLANTED), so the results are consistent. After that, just hit \"send\" and an id for that merged file will be returned. You can query that file as any other. It will be listed when you query for all files and can also be queried specifically by its id 2. Query & access specific file# You can query a merged file as any other. It will be listed when you query for all files and can also be queried specifically by its id. So this request is the same as seen on \"Get Operation Files\". You just have to update the environment variable \"id\" to the id of the merged file. Keep in mind that merging files is processing-heavy and may take about 20 minutes to finish. "},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/satellite_overview","content":"placeholder","keywords":""},{"title":"User Management","type":0,"sectionRef":"#","url":"docs/user_management_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"User Management","url":"docs/user_management_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://a.agrigate.io/services/usermanagement/api This service has the following endpoints available: Leaf Users Resources This service has the following enpoints. Copy GET /users/{id} GET /users/ John Deere Credentials This service has the following enpoints. Copy GET /credentials/{id} GET /credentials/ CFV Credentials This service has the following enpoints. Copy GET /users/{id} GET /users/ Trimble Credentials This service has the following enpoints. Copy GET /users/{id} GET /users/ CNHI Credentials This service has the following enpoints. Copy GET /users/{id} GET /users/ "},{"title":"GET /users/{id}","type":1,"pageTitle":"User Management","url":"docs/user_management_endpoints#get---usersid","content":"Get a Leaf User. Gets a Leaf User based on your \"id_token\" and return a JSON response with your id and other atributes. Copy { \"id\":\"UUID\", \"apiOwnerUsername\":\"str\", \"name\":\"str\", \"email\":\"help@withleaf.io\", \"phone\":\"str\", \"address\":\"str\", \"somarCredentials\":{\"Object\"}, \"trimbleCredentials\":{\"Object\"}, \"cnhiCredentials\":{\"Object\"}, \"johnDeereCredentials\":{\"Object\"}, \"ravenCredentials\":{\"Object\"}, \"climatempoCredentials\":{\"Object\"}, \"climateFieldViewCredentials\":\" {\"Object\"} } JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' const endpoint ='https://{{url}}/services/usermanagement/api/users/{{leaf-user-id}}' const headers ={'Authorization':`Bearer ${TOKEN}`} axios.get(endpoint,{ headers }) .then(res=>console.log(res.data)) .catch(console.error) "},{"title":"GET /users","type":1,"pageTitle":"User Management","url":"docs/user_management_endpoints#get---users","content":"Get all Leaf User. Gets all Leaf Users and return a JSON list response with your id and other atributes of all the users. Copy [{ \"id\":\"UUID\", \"apiOwnerUsername\":\"str\", \"name\":\"str\", \"email\":\"help@withleaf.io\", \"phone\":\"str\", \"address\":\"str\", \"somarCredentials\":{\"Object\"}, \"trimbleCredentials\":{\"Object\"}, \"cnhiCredentials\":{\"Object\"}, \"johnDeereCredentials\":{\"Object\"}, \"ravenCredentials\":{\"Object\"}, \"climatempoCredentials\":{\"Object\"}, \"climateFieldViewCredentials\":\" {\"Object\"} }] JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' const endpoint ='https://{{url}}/services/usermanagement/api/users/' const headers ={'Authorization':`Bearer ${TOKEN}`} axios.get(endpoint,{ headers }) .then(res=>console.log(res.data)) .catch(console.error) "},{"title":"GET john-deere-credentials/{id}","type":1,"pageTitle":"User Management","url":"docs/user_management_endpoints#get---john-deere-credentialsid","content":"To add your user's John Deere credentials, you will first need to have your clientKey and clientSecret from John Deere. If you don't have these yet, please register as a John Deere developer.. After registering and confirming your email, click on your profile image, then on \"Applications\" and you will be taken to a new page. On this new page, click \"Add Application\". After that, you can see your \"App ID\" and \"Shared Secret\" on your app's details. These are what we are referring here as \"clientKey\" and \"clientSecret\" respectively. Get Your key and secret To get your user's tokenId, tokenSecretKey and organization, you have to get your user's permission to access the service. To do so, we will generate an authentication link for them. For that, send a POST to https://gknk1zjl3b.execute-api.us-west-2.amazonaws.com/api/get_url containing a json like this: {\"client_key\": \"YOUR_APP'S\", \"client_secret\": \"YOUR_APP'S\"} You will receive a json containing an url like this: {\"authorization_url\": \"https://my.deere.com/consentToUseOfData?oauth_token=f2cf\"} JavaScriptPythonBash Copy var request =require('request'); var headers ={ 'Content-type':'application/json' }; var dataString = '{ \"client_key\":\"YOUR_APPS\", \"client_secret\":\"YOUR_APPS\" }'; var options ={ url:'https://gknk1zjl3b.execute-api.us-west-2.amazonaws.com/api/get_url', method:'POST', headers: headers, body: dataString }; functioncallback(error, response, body){ if(!error && response.statusCode==200){ console.log(body); } } request(options, callback); returns json like this {\"authorization_url\":\"https://my.deere.com/consentToUseOfData?oauth_token=f2cf\"} Get User's token id and token secret key You will redirect your user to this url, so that they can log in to his account and authorize your app to use their credentials. Once they log in, you will receive a response url. You will use it in the next step, to get your user's \"oauth_token\" and \"oauth_token_secret\", that we call \"tokenId\" and \"tokenSecretKey\" respectively. Now, just send a POST to https://gknk1zjl3b.execute-api.us-west-2.amazonaws.com/api/get_token with this json: {\"client_key\": \"YOUR_APP'S\", \"response_url\": \"YOUR_RESPONSE_URL\"} You will receive a json like this: {\"oauth_token\": \"YOUR_USER'S\", \"oauth_token_secret\": \"YOUR_USER'S\"} JavaScriptPythonBash Copy var request =require('request'); var headers ={ 'Content-type':'application/json' }; var dataString = '{ \"client_key\":\"YOURS\", \"client_secret\":\"YOURS\", \"token_id\":\"YOUR USERS\", \"token_secret_key\":\"YOUR USERS\" }'; var options ={ url:'https://ivlsjyyip6.execute-api.us-west-2.amazonaws.com/api/organizations', method:'POST', headers: headers, body: dataString }; functioncallback(error, response, body){ if(!error && response.statusCode==200){ console.log(body); } } request(options, callback); Get User's organization id Now, the last thing needed is your user's organization. To get it, just send a POST to https://ivlsjyyip6.execute-api.us-west-2.amazonaws.com/api/organizations with this json: { \"client_key\": \"{{client_key}}\", \"client_secret\": \"{{client_secret}}\", \"token_id\": \"{{token_id}}\", \"token_secret_key\": \"{{token_secret_key}}\" } You will receive a json like this: { \"total\": 1, \"values\": [{ \"@type\": \"Organization\", \"name\": \"USERS ORG NAME\", \"type\": \"customer\", \"member\": true, \"id\": \"THIS IS THE ID YOU WILL NEED\" }] } Once you have these, adding John Deere credentials to a user is a simple process. Just follow the add John Deere credentials section. JavaScriptPythonBash Copy ar request =require('request'); var headers ={ 'Content-type':'application/json' }; var dataString = '{ \"client_key\":\"YOURS\", \"client_secret\":\"YOURS\", \"token_id\":\"YOUR USERS\", \"token_secret_key\":\"YOUR USERS\" }'; var options ={ url:'https://ivlsjyyip6.execute-api.us-west-2.amazonaws.com/api/organizations', method:'POST', headers: headers, body: dataString }; functioncallback(error, response, body){ if(!error && response.statusCode==200){ console.log(body); } } request(options, callback); returns a json like this { \"total\":1, \"values\":[{ \"@type\":\"Organization\", \"name\":\"USERS ORG NAME\", \"type\":\"customer\", \"member\":true, \"id\":\"THIS IS THE ID YOU WILL NEED\" }] } :::tip Please don't hesitate to [contact][contact] us to schedule a demo, ask a question, request sample data, or suggest a feature! ::: "},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/user_management_overview","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Overview","url":"docs/user_management_overview#overview","content":""},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/satellite_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#about","content":"Our API returns processed, cropped, and color-corrected RGB and NDVI images.  All HTTP methods should be prepended by this service's endpoint: Copy https://a.agrigate.io/services/satellite/api This service has the following endpoints available: Copy GET /fields GET /fields/{id} GET /fields/{id}/processes POST /fields PUT /fields/{id} DELETE /fields/{id}  "},{"title":"Endpoints","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#endpoints","content":""},{"title":"GET /fields","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#get-fields","content":"Returns paged results for all fields registered. It returns a list of JSON objects like so: Copy [ { \"externalId\":\"your field id\", \"geometry\":{ \"type\":\"MultiPolygon\", \"coordinates\":[...] } }, # etc... ] externalId: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' const endpoint ='https://a.agrigate.io/services/satellite/api/fields' const headers ={'Authorization':`Bearer ${TOKEN}`} axios.get(endpoint,{ headers }) .then(res=>console.log(res.data)) .catch(console.error)  "},{"title":"GET /fields/{id}","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#get-fieldsid","content":"Fetches a field entry based on its external id. It returns a single JSON object with the following entries (like each item fromGET /fields results): Copy { \"externalId\":\"your field id\", \"geometry\":{ \"type\":\"MultiPolygon\", \"coordinates\":[...] } } id: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' const endpoint ='https://a.agrigate.io/services/satellite/api/fields/YOUR_ID' const headers ={'Authorization':`Bearer ${TOKEN}`} axios.get(endpoint,{ headers }) .then(res=>console.log(res.data)) .catch(console.error)  "},{"title":"GET /fields/{id}/processes","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#get-fieldsidprocesses","content":"Returns all processes already handled by our service. A process is created by our servers whenever there is a new satellite image that intersects with one of your registered fields. This endpoint is used to access all images that each process generates. The returned payload is like so: Copy [ { \"date\":\"2020-06-03T19:03:57.882Z\", \"clouds\":0, \"bucketName\":\"sentinel-s2-l1c\", \"bucketKey\":\"tiles/10/S/FH/2020/6/3/0\", \"bucketRegion\":\"eu-central-1\", \"status\":\"SUCCESS\", \"coverage\":100, \"images\":[ { \"url\":\"url.to.your.image.tif\", \"type\":\"tif\", \"resolution\":20 }, # etc... ] }, # etc... ] date: the date of the satellite imageclouds: cloud coverage percentage of the field, from 0 to 100bucketName: name of Sentinel's bucket where the original tile is. Usuallysentinel-s2-l1cbucketRegion: AWS region of original image's bucket. Usually eu-central-1bucketKey: base path of original satellite imagestatus: status of the process. It will be either SUCCESS or FAILUREcoverage: data coverage percentage of the field, from 0 to 100images: each image in this list will have the following data: url: URL of the imagetype: the type of the image. One of tif, ndvi, png andtif_colorizedresolution: resolution, in meters, of the image. See table below Usually, we generate a total of 17 images for each intersected field. A GeoTiff for each band from Sentinel; some utility images as well, RGB and NDVI. The following table shows all the images with its resolutions and types: Name\tResolution\tTypeB01.tif\t60 meters\ttif B02.tif\t10\ttif B03.tif\t10\ttif B04.tif\t10\ttif B05.tif\t20\ttif B06.tif\t20\ttif B07.tif\t20\ttif B08.tif\t10\ttif B09.tif\t60\ttif B10.tif\t60\ttif B11.tif\t20\ttif B12.tif\t20\ttif NDVI.png\tNULL\tpng NDVI.tif\t10\tndvi NDVI_color.tif\t10\ttif_colorized RGB.png\tNULL\tpng RGB.tif\t10\ttif_colorized PNG files do not have resolution because they are scaled up by 800%, so each pixel does not represent the correct size anymore. We generate a colorized NDVI_color.tif using a custom built color ramp. See the image below. If you want to use your own ramp, we recommend using NDVI.tif, which is a pre calculated NDVI file. You can import it into any GIS software, like QGis, and use it as you please.  JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' let endpoint ='https://a.agrigate.io/services/satellite/api'+ '/fields/YOUR_ID/processes' const headers ={'Authorization':`Bearer ${TOKEN}`} axios.get(endpoint,{ headers }) .then(res=>console.log(res.data)) .catch(console.error)  "},{"title":"POST /fields","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#post-fields","content":"Creates a new field entry in the database. A field will start to be monitored as soon as it is added to our database. It will be continuously monitored for as long as it is in there. If you want to stop this process, you should remove the field from the database entirely. Use a DELETE HTTP request. caution Note that the field deletion cascades to all other tables. Meaning that all processed images will be lost. Payload# The payload of this object should be like the following: Copy { \"externalId\":\"your field id\", \"geometry\":{ \"type\":\"MultiPolygon\", \"coordinates\":[...] } } externalId: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field There are some limitations regarding the geometry of the field. It cannot be bigger than 50 million square meters and it cannot have a perimeter bigger than ~28 thousand meters. JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' let endpoint ='https://a.agrigate.io/services/satellite/api/fields' const headers ={'Authorization':`Bearer ${TOKEN}`} const data ={/* Your payload */} axios.post(endpoint,{ headers, data }) .then(res=>console.log(res.data)) .catch(console.error)  "},{"title":"PUT /fields/{id}","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#put-fieldsid","content":"Endpoint used to update the geometry of the field. You cannot update the external id. The payload is a single JSON object with an entry geometry which contains a MultiPolygon GeoJSON object. Again, the new geometry must respect the area and perimeter limits of POST /fields. JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' let endpoint ='https://a.agrigate.io/services/satellite/api/fields' const headers ={'Authorization':`Bearer ${TOKEN}`} const data ={/* Your geometry */} axios.post(endpoint,{ headers, data }) .then(res=>console.log(res.data)) .catch(console.error)  "},{"title":"DELETE /fields/{id}","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#delete-fieldsid","content":"Deletes the field from our database. caution Be careful when using this method. It will delete all the processed images from the database as well. JavaScriptPythonBash Copy const axios =require('axios') constTOKEN='YOUR_TOKEN' const client = axios.create({ baseURL:'https://a.agrigate.io', headers:{'Authorization':`Bearer ${TOKEN}`} }) client.delete('/fields/YOUR_ID') .then(res=>console.log(res.statusCode)) .catch(console.error) "}]